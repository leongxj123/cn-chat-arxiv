<rss version="2.0"><channel><title>Chat Arxiv cs.DC</title><link>https://github.com/qhduan/cn-chat-arxiv</link><description>This is arxiv RSS feed for cs.DC</description><item><title>LoCoDL&#26159;&#19968;&#31181;&#36890;&#20449;&#39640;&#25928;&#30340;&#20998;&#24067;&#24335;&#23398;&#20064;&#31639;&#27861;&#65292;&#32467;&#21512;&#20102;&#26412;&#22320;&#35757;&#32451;&#21644;&#21387;&#32553;&#25216;&#26415;&#65292;&#20855;&#26377;&#21452;&#20493;&#21152;&#36895;&#30340;&#36890;&#20449;&#22797;&#26434;&#24230;&#20248;&#21183;&#65292;&#29305;&#21035;&#36866;&#29992;&#20110;&#19968;&#33324;&#24322;&#26500;&#26465;&#20214;&#19979;&#30340;&#24378;&#20984;&#20989;&#25968;&#12290;</title><link>https://arxiv.org/abs/2403.04348</link><description>&lt;p&gt;
LoCoDL: &#20855;&#26377;&#26412;&#22320;&#35757;&#32451;&#21644;&#21387;&#32553;&#30340;&#36890;&#20449;&#39640;&#25928;&#20998;&#24067;&#24335;&#23398;&#20064;
&lt;/p&gt;
&lt;p&gt;
LoCoDL: Communication-Efficient Distributed Learning with Local Training and Compression
&lt;/p&gt;
&lt;p&gt;
https://arxiv.org/abs/2403.04348
&lt;/p&gt;
&lt;p&gt;
LoCoDL&#26159;&#19968;&#31181;&#36890;&#20449;&#39640;&#25928;&#30340;&#20998;&#24067;&#24335;&#23398;&#20064;&#31639;&#27861;&#65292;&#32467;&#21512;&#20102;&#26412;&#22320;&#35757;&#32451;&#21644;&#21387;&#32553;&#25216;&#26415;&#65292;&#20855;&#26377;&#21452;&#20493;&#21152;&#36895;&#30340;&#36890;&#20449;&#22797;&#26434;&#24230;&#20248;&#21183;&#65292;&#29305;&#21035;&#36866;&#29992;&#20110;&#19968;&#33324;&#24322;&#26500;&#26465;&#20214;&#19979;&#30340;&#24378;&#20984;&#20989;&#25968;&#12290;
&lt;/p&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;p&gt;
&#22312;&#20998;&#24067;&#24335;&#20248;&#21270;&#21644;&#23398;&#20064;&#20013;&#65292;&#29978;&#33267;&#22312;&#29616;&#20195;&#32852;&#37030;&#23398;&#20064;&#26694;&#26550;&#20013;&#65292;&#30001;&#20110;&#36890;&#20449;&#36895;&#24230;&#24930;&#19988;&#25104;&#26412;&#39640;&#65292;&#36890;&#20449;&#33267;&#20851;&#37325;&#35201;&#12290;&#25105;&#20204;&#20171;&#32461;&#20102;LoCoDL&#65292;&#36825;&#26159;&#19968;&#31181;&#36890;&#20449;&#39640;&#25928;&#30340;&#31639;&#27861;&#65292;&#23427;&#21033;&#29992;&#20102;&#26412;&#22320;&#35757;&#32451;&#21644;&#21387;&#32553;&#36825;&#20004;&#31181;&#27969;&#34892;&#19988;&#26377;&#25928;&#30340;&#25216;&#26415;&#65292;&#26412;&#22320;&#35757;&#32451;&#38477;&#20302;&#20102;&#36890;&#20449;&#39057;&#29575;&#65292;&#21387;&#32553;&#21017;&#26159;&#21457;&#36865;&#30701;&#30340;&#27604;&#29305;&#27969;&#32780;&#19981;&#26159;&#23436;&#25972;&#30340;&#28014;&#28857;&#25968;&#21521;&#37327;&#12290;LoCoDL&#36866;&#29992;&#20110;&#22823;&#31867;&#21035;&#30340;&#26080;&#20559;&#21387;&#32553;&#22120;&#65292;&#20854;&#20013;&#21253;&#25324;&#24191;&#27867;&#20351;&#29992;&#30340;&#31232;&#30095;&#21270;&#21644;&#37327;&#21270;&#26041;&#27861;&#12290;LoCoDL&#22312;&#19968;&#33324;&#24322;&#26500;&#26465;&#20214;&#19979;&#20855;&#26377;&#21452;&#20493;&#21152;&#36895;&#30340;&#36890;&#20449;&#22797;&#26434;&#24230;&#20248;&#21183;&#65292;&#36825;&#21462;&#20915;&#20110;&#20989;&#25968;&#30340;&#26465;&#20214;&#25968;&#21644;&#27169;&#22411;&#32500;&#24230;&#65292;&#29305;&#21035;&#26159;&#22312;&#24378;&#20984;&#20989;&#25968;&#30340;&#24773;&#20917;&#19979;&#12290;&#22312;&#23454;&#36341;&#20013;&#24471;&#21040;&#20102;&#39564;&#35777;&#65292;LoCoDL&#32988;&#36807;&#20102;&#29616;&#26377;&#30340;&#31639;&#27861;&#12290;
&lt;/p&gt;
&lt;p&gt;
arXiv:2403.04348v1 Announce Type: cross  Abstract: In Distributed optimization and Learning, and even more in the modern framework of federated learning, communication, which is slow and costly, is critical. We introduce LoCoDL, a communication-efficient algorithm that leverages the two popular and effective techniques of Local training, which reduces the communication frequency, and Compression, in which short bitstreams are sent instead of full-dimensional vectors of floats. LoCoDL works with a large class of unbiased compressors that includes widely-used sparsification and quantization methods. LoCoDL provably benefits from local training and compression and enjoys a doubly-accelerated communication complexity, with respect to the condition number of the functions and the model dimension, in the general heterogenous regime with strongly convex functions. This is confirmed in practice, with LoCoDL outperforming existing algorithms.
&lt;/p&gt;</description></item><item><title>&#26412;&#25991;&#20171;&#32461;&#20102;Fiddler&#65292;&#19968;&#31181;&#29992;&#20110;Mixture-of-Experts&#27169;&#22411;&#30340;&#36164;&#28304;&#39640;&#25928;&#25512;&#26029;&#24341;&#25806;&#65292;&#36890;&#36807;CPU-GPU&#32534;&#25490;&#23454;&#29616;&#26368;&#23567;&#21270;&#25968;&#25454;&#20256;&#36755;&#65292;&#30456;&#27604;&#29616;&#26377;&#26041;&#27861;&#25552;&#39640;&#20102;&#19968;&#20010;&#25968;&#37327;&#32423;&#30340;&#25512;&#26029;&#36895;&#24230;&#12290;</title><link>https://arxiv.org/abs/2402.07033</link><description>&lt;p&gt;
Fiddler&#65306;&#29992;&#20110;Mixture-of-Experts&#27169;&#22411;&#24555;&#36895;&#25512;&#26029;&#30340;CPU-GPU&#32534;&#25490;
&lt;/p&gt;
&lt;p&gt;
Fiddler: CPU-GPU Orchestration for Fast Inference of Mixture-of-Experts Models
&lt;/p&gt;
&lt;p&gt;
https://arxiv.org/abs/2402.07033
&lt;/p&gt;
&lt;p&gt;
&#26412;&#25991;&#20171;&#32461;&#20102;Fiddler&#65292;&#19968;&#31181;&#29992;&#20110;Mixture-of-Experts&#27169;&#22411;&#30340;&#36164;&#28304;&#39640;&#25928;&#25512;&#26029;&#24341;&#25806;&#65292;&#36890;&#36807;CPU-GPU&#32534;&#25490;&#23454;&#29616;&#26368;&#23567;&#21270;&#25968;&#25454;&#20256;&#36755;&#65292;&#30456;&#27604;&#29616;&#26377;&#26041;&#27861;&#25552;&#39640;&#20102;&#19968;&#20010;&#25968;&#37327;&#32423;&#30340;&#25512;&#26029;&#36895;&#24230;&#12290;
&lt;/p&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;p&gt;
&#22522;&#20110;Mixture-of-Experts&#65288;MoE&#65289;&#26550;&#26500;&#30340;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;&#65288;LLM&#65289;&#22312;&#21508;&#31181;&#20219;&#21153;&#19978;&#34920;&#29616;&#20986;&#20102;&#24456;&#22909;&#30340;&#24615;&#33021;&#12290;&#28982;&#32780;&#65292;&#22312;&#36164;&#28304;&#21463;&#38480;&#30340;&#29615;&#22659;&#19979;&#36816;&#34892;&#36825;&#20123;&#27169;&#22411;&#65292;&#21363;GPU&#20869;&#23384;&#36164;&#28304;&#19981;&#20016;&#23500;&#30340;&#24773;&#20917;&#19979;&#65292;&#30001;&#20110;&#27169;&#22411;&#35268;&#27169;&#24222;&#22823;&#65292;&#23384;&#22312;&#25361;&#25112;&#12290;&#29616;&#26377;&#30340;&#23558;&#27169;&#22411;&#26435;&#37325;&#21368;&#36733;&#21040;CPU&#20869;&#23384;&#30340;&#31995;&#32479;&#65292;&#30001;&#20110;&#39057;&#32321;&#22320;&#22312;CPU&#21644;GPU&#20043;&#38388;&#31227;&#21160;&#25968;&#25454;&#32780;&#23548;&#33268;&#26174;&#33879;&#30340;&#24320;&#38144;&#12290;&#22312;&#26412;&#25991;&#20013;&#65292;&#25105;&#20204;&#25552;&#20986;&#20102;Fiddler&#65292;&#19968;&#31181;&#29992;&#20110;MoE&#27169;&#22411;&#30340;&#36164;&#28304;&#39640;&#25928;&#25512;&#26029;&#24341;&#25806;&#65292;&#23454;&#29616;&#20102;CPU-GPU&#32534;&#25490;&#12290;Fiddler&#30340;&#26680;&#24515;&#24605;&#24819;&#26159;&#21033;&#29992;CPU&#30340;&#35745;&#31639;&#33021;&#21147;&#26469;&#26368;&#23567;&#21270;CPU&#21644;GPU&#20043;&#38388;&#30340;&#25968;&#25454;&#20256;&#36755;&#12290;&#25105;&#20204;&#30340;&#35780;&#20272;&#32467;&#26524;&#34920;&#26126;&#65292;Fiddler&#33021;&#22815;&#22312;&#21333;&#20010;&#20855;&#26377;24GB&#20869;&#23384;&#30340;GPU&#19978;&#36816;&#34892;&#26410;&#21387;&#32553;&#30340;Mixtral-8x7B&#27169;&#22411;&#65288;&#21442;&#25968;&#36229;&#36807;90GB&#65289;&#65292;&#27599;&#31186;&#29983;&#25104;&#36229;&#36807;3&#20010;token&#65292;&#30456;&#27604;&#29616;&#26377;&#26041;&#27861;&#25552;&#39640;&#19968;&#20010;&#25968;&#37327;&#32423;&#12290;Fiddler&#30340;&#20195;&#30721;&#21487;&#20197;&#20844;&#24320;&#35775;&#38382;&#65292;&#32593;&#22336;&#20026;\url{https://github.com/efeslab/fiddler}
&lt;/p&gt;
&lt;p&gt;
Large Language Models (LLMs) based on Mixture-of-Experts (MoE) architecture are showing promising performance on various tasks. However, running them on resource-constrained settings, where GPU memory resources are not abundant, is challenging due to huge model sizes. Existing systems that offload model weights to CPU memory suffer from the significant overhead of frequently moving data between CPU and GPU. In this paper, we propose Fiddler, a resource-efficient inference engine with CPU-GPU orchestration for MoE models. The key idea of Fiddler is to use the computation ability of the CPU to minimize the data movement between the CPU and GPU. Our evaluation shows that Fiddler can run the uncompressed Mixtral-8x7B model, which exceeds 90GB in parameters, to generate over $3$ tokens per second on a single GPU with 24GB memory, showing an order of magnitude improvement over existing methods. The code of Fiddler is publicly available at \url{https://github.com/efeslab/fiddler}
&lt;/p&gt;</description></item></channel></rss>