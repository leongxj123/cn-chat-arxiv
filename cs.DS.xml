<rss version="2.0"><channel><title>Chat Arxiv cs.DS</title><link>https://github.com/qhduan/cn-chat-arxiv</link><description>This is arxiv RSS feed for cs.DS</description><item><title>&#36825;&#26159;&#19968;&#20010;&#23398;&#20064;&#22686;&#24378;&#30340;B&#26641;&#65292;&#36890;&#36807;&#20351;&#29992;&#20855;&#26377;&#22797;&#21512;&#20248;&#20808;&#32423;&#30340;Treaps&#65292;&#27599;&#20010;&#39033;&#30446;&#30340;&#28145;&#24230;&#30001;&#20854;&#39044;&#27979;&#26435;&#37325;&#30830;&#23450;&#65292;&#25512;&#24191;&#20102;&#26368;&#36817;&#30340;&#23398;&#20064;&#22686;&#24378;BST&#65292;&#24182;&#19988;&#26159;&#31532;&#19968;&#20010;&#21487;&#20197;&#21033;&#29992;&#35775;&#38382;&#24207;&#21015;&#20013;&#30340;&#23616;&#37096;&#24615;&#30340;B&#26641;&#25968;&#25454;&#32467;&#26500;&#12290;</title><link>http://arxiv.org/abs/2211.09251</link><description>&lt;p&gt;
&#23398;&#20064;&#22686;&#24378;&#30340;B&#26641;
&lt;/p&gt;
&lt;p&gt;
Learning-Augmented B-Trees. (arXiv:2211.09251v2 [cs.DS] UPDATED)
&lt;/p&gt;
&lt;p&gt;
http://arxiv.org/abs/2211.09251
&lt;/p&gt;
&lt;p&gt;
&#36825;&#26159;&#19968;&#20010;&#23398;&#20064;&#22686;&#24378;&#30340;B&#26641;&#65292;&#36890;&#36807;&#20351;&#29992;&#20855;&#26377;&#22797;&#21512;&#20248;&#20808;&#32423;&#30340;Treaps&#65292;&#27599;&#20010;&#39033;&#30446;&#30340;&#28145;&#24230;&#30001;&#20854;&#39044;&#27979;&#26435;&#37325;&#30830;&#23450;&#65292;&#25512;&#24191;&#20102;&#26368;&#36817;&#30340;&#23398;&#20064;&#22686;&#24378;BST&#65292;&#24182;&#19988;&#26159;&#31532;&#19968;&#20010;&#21487;&#20197;&#21033;&#29992;&#35775;&#38382;&#24207;&#21015;&#20013;&#30340;&#23616;&#37096;&#24615;&#30340;B&#26641;&#25968;&#25454;&#32467;&#26500;&#12290;
&lt;/p&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;p&gt;
&#26412;&#30740;&#31350;&#36890;&#36807;&#20351;&#29992;&#20855;&#26377;&#22797;&#21512;&#20248;&#20808;&#32423;&#30340;Treaps&#26469;&#30740;&#31350;&#23398;&#20064;&#22686;&#24378;&#30340;&#20108;&#21449;&#25628;&#32034;&#26641;&#65288;BST&#65289;&#21644;B&#26641;&#12290;&#32467;&#26524;&#26159;&#19968;&#20010;&#31616;&#21333;&#30340;&#25628;&#32034;&#26641;&#65292;&#20854;&#20013;&#27599;&#20010;&#39033;&#30446;&#30340;&#28145;&#24230;&#30001;&#20854;&#39044;&#27979;&#26435;&#37325;$w_x$&#30830;&#23450;&#12290;&#20026;&#20102;&#23454;&#29616;&#36825;&#20010;&#32467;&#26524;&#65292;&#27599;&#20010;&#39033;&#30446;$x$&#37117;&#26377;&#20854;&#22797;&#21512;&#20248;&#20808;&#32423;$-\lfloor\log\log(1/w_x)\rfloor + U(0, 1)$&#65292;&#20854;&#20013;$U(0, 1)$&#26159;&#22343;&#21248;&#20998;&#24067;&#30340;&#38543;&#26426;&#21464;&#37327;&#12290;&#36825;&#23558;&#26368;&#36817;&#30340;&#23398;&#20064;&#22686;&#24378;BST&#65288;Lin-Luo-Woodruff ICML`22&#65289;&#25512;&#24191;&#21040;&#20219;&#24847;&#36755;&#20837;&#21644;&#39044;&#27979;&#65292;&#32780;&#19981;&#20165;&#20165;&#36866;&#29992;&#20110;Zipfian&#20998;&#24067;&#12290;&#23427;&#36824;&#25552;&#20379;&#20102;&#31532;&#19968;&#20010;&#21487;&#20197;&#26681;&#25454;&#35775;&#38382;&#24207;&#21015;&#20013;&#30340;&#23616;&#37096;&#24615;&#36827;&#34892;&#22312;&#32447;&#33258;&#25105;&#37325;&#32452;&#30340;B&#26641;&#25968;&#25454;&#32467;&#26500;&#12290;&#35813;&#25968;&#25454;&#32467;&#26500;&#23545;&#20110;&#39044;&#27979;&#38169;&#35823;&#26159;&#20581;&#22766;&#30340;&#65292;&#21487;&#20197;&#22788;&#29702;&#25554;&#20837;&#12289;&#21024;&#38500;&#20197;&#21450;&#39044;&#27979;&#26356;&#26032;&#12290;
&lt;/p&gt;
&lt;p&gt;
We study learning-augmented binary search trees (BSTs) and B-Trees via Treaps with composite priorities. The result is a simple search tree where the depth of each item is determined by its predicted weight $w_x$. To achieve the result, each item $x$ has its composite priority $-\lfloor\log\log(1/w_x)\rfloor + U(0, 1)$ where $U(0, 1)$ is the uniform random variable. This generalizes the recent learning-augmented BSTs [Lin-Luo-Woodruff ICML`22], which only work for Zipfian distributions, to arbitrary inputs and predictions. It also gives the first B-Tree data structure that can provably take advantage of localities in the access sequence via online self-reorganization. The data structure is robust to prediction errors and handles insertions, deletions, as well as prediction updates.
&lt;/p&gt;</description></item></channel></rss>