<rss version="2.0"><channel><title>Chat Arxiv cs.DS</title><link>https://github.com/qhduan/cn-chat-arxiv</link><description>This is arxiv RSS feed for cs.DS</description><item><title>&#35813;&#35770;&#25991;&#32771;&#34385;&#20102;&#19968;&#31181;&#22312;&#32447;&#38750;&#20984;&#20248;&#21270;&#38382;&#39064;&#65292;&#30446;&#26631;&#26159;&#36890;&#36807;&#35843;&#33410;&#27963;&#21160;&#26381;&#21153;&#22120;&#25968;&#37327;&#26368;&#23567;&#21270;&#20316;&#19994;&#24310;&#36831;&#65292;&#24341;&#20837;&#20102;&#20999;&#25442;&#25104;&#26412;&#65292;&#25552;&#20986;&#20102;&#31454;&#20105;&#31639;&#27861;&#12290;</title><link>https://arxiv.org/abs/2403.17480</link><description>&lt;p&gt;
&#20855;&#26377;&#20869;&#23384;&#21644;&#20999;&#25442;&#25104;&#26412;&#30340;&#22312;&#32447;&#38750;&#20984;&#20248;&#21270;&#38382;&#39064;&#30340;&#23481;&#37327;&#35843;&#37197;&#21160;&#26426;
&lt;/p&gt;
&lt;p&gt;
Capacity Provisioning Motivated Online Non-Convex Optimization Problem with Memory and Switching Cost
&lt;/p&gt;
&lt;p&gt;
https://arxiv.org/abs/2403.17480
&lt;/p&gt;
&lt;p&gt;
&#35813;&#35770;&#25991;&#32771;&#34385;&#20102;&#19968;&#31181;&#22312;&#32447;&#38750;&#20984;&#20248;&#21270;&#38382;&#39064;&#65292;&#30446;&#26631;&#26159;&#36890;&#36807;&#35843;&#33410;&#27963;&#21160;&#26381;&#21153;&#22120;&#25968;&#37327;&#26368;&#23567;&#21270;&#20316;&#19994;&#24310;&#36831;&#65292;&#24341;&#20837;&#20102;&#20999;&#25442;&#25104;&#26412;&#65292;&#25552;&#20986;&#20102;&#31454;&#20105;&#31639;&#27861;&#12290;
&lt;/p&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;p&gt;
&#32771;&#34385;&#20102;&#19968;&#31181;&#22312;&#32447;&#38750;&#20984;&#20248;&#21270;&#38382;&#39064;&#65292;&#20854;&#30446;&#26631;&#26159;&#36890;&#36807;&#35843;&#33410;&#27963;&#21160;&#26381;&#21153;&#22120;&#30340;&#25968;&#37327;&#26469;&#26368;&#23567;&#21270;&#19968;&#32452;&#20316;&#19994;&#30340;&#27969;&#37327;&#26102;&#38388;&#65288;&#24635;&#24310;&#36831;&#65289;&#65292;&#20294;&#22312;&#26102;&#38388;&#21464;&#21270;&#26102;&#25913;&#21464;&#27963;&#21160;&#26381;&#21153;&#22120;&#25968;&#37327;&#20250;&#20135;&#29983;&#20999;&#25442;&#25104;&#26412;&#12290;&#27599;&#20010;&#20316;&#19994;&#22312;&#20219;&#20309;&#26102;&#38388;&#20869;&#26368;&#22810;&#21487;&#20197;&#30001;&#19968;&#20010;&#22266;&#23450;&#36895;&#24230;&#30340;&#26381;&#21153;&#22120;&#22788;&#29702;&#12290;&#19982;&#36890;&#24120;&#20855;&#26377;&#20999;&#25442;&#25104;&#26412;&#30340;&#22312;&#32447;&#20984;&#20248;&#21270;&#65288;OCO&#65289;&#38382;&#39064;&#30456;&#27604;&#65292;&#25152;&#32771;&#34385;&#30340;&#30446;&#26631;&#20989;&#25968;&#26159;&#38750;&#20984;&#30340;&#65292;&#24182;&#19988;&#26356;&#37325;&#35201;&#30340;&#26159;&#65292;&#22312;&#27599;&#20010;&#26102;&#38388;&#28857;&#65292;&#23427;&#21462;&#20915;&#20110;&#25152;&#26377;&#36807;&#21435;&#30340;&#20915;&#31574;&#65292;&#32780;&#19981;&#20165;&#20165;&#26159;&#24403;&#21069;&#30340;&#20915;&#31574;&#12290;&#32771;&#34385;&#20102;&#26368;&#22351;&#24773;&#20917;&#21644;&#38543;&#26426;&#36755;&#20837;&#65307;&#23545;&#20110;&#36825;&#20004;&#31181;&#24773;&#20917;&#65292;&#25552;&#20986;&#20102;&#31454;&#20105;&#31639;&#27861;&#12290;
&lt;/p&gt;
&lt;p&gt;
arXiv:2403.17480v1 Announce Type: cross  Abstract: An online non-convex optimization problem is considered where the goal is to minimize the flow time (total delay) of a set of jobs by modulating the number of active servers, but with a switching cost associated with changing the number of active servers over time. Each job can be processed by at most one fixed speed server at any time. Compared to the usual online convex optimization (OCO) problem with switching cost, the objective function considered is non-convex and more importantly, at each time, it depends on all past decisions and not just the present one. Both worst-case and stochastic inputs are considered; for both cases, competitive algorithms are derived.
&lt;/p&gt;</description></item><item><title>&#36825;&#31687;&#32508;&#36848;&#35843;&#30740;&#20102;&#22270;&#32553;&#20943;&#26041;&#27861;&#65292;&#21253;&#25324;&#31232;&#30095;&#21270;&#12289;&#31895;&#21270;&#21644;&#27987;&#32553;&#65292;&#22312;&#35299;&#20915;&#22823;&#22411;&#22270;&#24418;&#25968;&#25454;&#20998;&#26512;&#21644;&#35745;&#31639;&#22797;&#26434;&#24615;&#26041;&#38754;&#36215;&#21040;&#20102;&#37325;&#35201;&#20316;&#29992;&#12290;&#35843;&#30740;&#23545;&#36825;&#20123;&#26041;&#27861;&#30340;&#25216;&#26415;&#32454;&#33410;&#36827;&#34892;&#20102;&#31995;&#32479;&#30340;&#22238;&#39038;&#65292;&#24182;&#24378;&#35843;&#20102;&#23427;&#20204;&#22312;&#23454;&#38469;&#24212;&#29992;&#20013;&#30340;&#20851;&#38190;&#24615;&#12290;&#21516;&#26102;&#65292;&#35843;&#30740;&#36824;&#25552;&#20986;&#20102;&#20445;&#35777;&#22270;&#32553;&#20943;&#25216;&#26415;&#25345;&#32493;&#26377;&#25928;&#24615;&#30340;&#20851;&#38190;&#30740;&#31350;&#26041;&#21521;&#12290;</title><link>https://arxiv.org/abs/2402.03358</link><description>&lt;p&gt;
&#22270;&#32553;&#20943;&#30340;&#32508;&#21512;&#35843;&#30740;&#65306;&#31232;&#30095;&#21270;&#12289;&#31895;&#21270;&#21644;&#27987;&#32553;
&lt;/p&gt;
&lt;p&gt;
A Comprehensive Survey on Graph Reduction: Sparsification, Coarsening, and Condensation
&lt;/p&gt;
&lt;p&gt;
https://arxiv.org/abs/2402.03358
&lt;/p&gt;
&lt;p&gt;
&#36825;&#31687;&#32508;&#36848;&#35843;&#30740;&#20102;&#22270;&#32553;&#20943;&#26041;&#27861;&#65292;&#21253;&#25324;&#31232;&#30095;&#21270;&#12289;&#31895;&#21270;&#21644;&#27987;&#32553;&#65292;&#22312;&#35299;&#20915;&#22823;&#22411;&#22270;&#24418;&#25968;&#25454;&#20998;&#26512;&#21644;&#35745;&#31639;&#22797;&#26434;&#24615;&#26041;&#38754;&#36215;&#21040;&#20102;&#37325;&#35201;&#20316;&#29992;&#12290;&#35843;&#30740;&#23545;&#36825;&#20123;&#26041;&#27861;&#30340;&#25216;&#26415;&#32454;&#33410;&#36827;&#34892;&#20102;&#31995;&#32479;&#30340;&#22238;&#39038;&#65292;&#24182;&#24378;&#35843;&#20102;&#23427;&#20204;&#22312;&#23454;&#38469;&#24212;&#29992;&#20013;&#30340;&#20851;&#38190;&#24615;&#12290;&#21516;&#26102;&#65292;&#35843;&#30740;&#36824;&#25552;&#20986;&#20102;&#20445;&#35777;&#22270;&#32553;&#20943;&#25216;&#26415;&#25345;&#32493;&#26377;&#25928;&#24615;&#30340;&#20851;&#38190;&#30740;&#31350;&#26041;&#21521;&#12290;
&lt;/p&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;p&gt;
&#35768;&#22810;&#30495;&#23454;&#19990;&#30028;&#30340;&#25968;&#25454;&#38598;&#21487;&#20197;&#33258;&#28982;&#22320;&#34920;&#31034;&#20026;&#22270;&#65292;&#28085;&#30422;&#20102;&#24191;&#27867;&#30340;&#39046;&#22495;&#12290;&#28982;&#32780;&#65292;&#22270;&#25968;&#25454;&#38598;&#30340;&#22797;&#26434;&#24615;&#21644;&#35268;&#27169;&#30340;&#22686;&#21152;&#20026;&#20998;&#26512;&#21644;&#35745;&#31639;&#24102;&#26469;&#20102;&#26174;&#33879;&#30340;&#25361;&#25112;&#12290;&#20026;&#27492;&#65292;&#22270;&#32553;&#20943;&#25216;&#26415;&#22312;&#20445;&#30041;&#20851;&#38190;&#23646;&#24615;&#30340;&#21516;&#26102;&#31616;&#21270;&#22823;&#22411;&#22270;&#24418;&#25968;&#25454;&#21464;&#24471;&#36234;&#26469;&#36234;&#21463;&#20851;&#27880;&#12290;&#22312;&#26412;&#35843;&#30740;&#20013;&#65292;&#25105;&#20204;&#26088;&#22312;&#25552;&#20379;&#23545;&#22270;&#32553;&#20943;&#26041;&#27861;&#30340;&#20840;&#38754;&#29702;&#35299;&#65292;&#21253;&#25324;&#22270;&#31232;&#30095;&#21270;&#12289;&#22270;&#31895;&#21270;&#21644;&#22270;&#27987;&#32553;&#12290;&#20855;&#20307;&#32780;&#35328;&#65292;&#25105;&#20204;&#24314;&#31435;&#20102;&#36825;&#20123;&#26041;&#27861;&#30340;&#32479;&#19968;&#23450;&#20041;&#65292;&#24182;&#24341;&#20837;&#20102;&#19968;&#20010;&#20998;&#23618;&#20998;&#31867;&#27861;&#26469;&#20998;&#31867;&#36825;&#20123;&#26041;&#27861;&#25152;&#35299;&#20915;&#30340;&#25361;&#25112;&#12290;&#25105;&#20204;&#30340;&#35843;&#30740;&#31995;&#32479;&#22320;&#22238;&#39038;&#20102;&#36825;&#20123;&#26041;&#27861;&#30340;&#25216;&#26415;&#32454;&#33410;&#65292;&#24182;&#24378;&#35843;&#20102;&#23427;&#20204;&#22312;&#21508;&#31181;&#22330;&#26223;&#20013;&#30340;&#23454;&#38469;&#24212;&#29992;&#12290;&#27492;&#22806;&#65292;&#25105;&#20204;&#36824;&#27010;&#36848;&#20102;&#20445;&#35777;&#22270;&#32553;&#20943;&#25216;&#26415;&#25345;&#32493;&#26377;&#25928;&#24615;&#30340;&#20851;&#38190;&#30740;&#31350;&#26041;&#21521;&#65292;&#24182;&#25552;&#20379;&#20102;&#19968;&#20010;&#35814;&#32454;&#30340;&#35770;&#25991;&#21015;&#34920;&#38142;&#25509;&#12290;
&lt;/p&gt;
&lt;p&gt;
Many real-world datasets can be naturally represented as graphs, spanning a wide range of domains. However, the increasing complexity and size of graph datasets present significant challenges for analysis and computation. In response, graph reduction techniques have gained prominence for simplifying large graphs while preserving essential properties. In this survey, we aim to provide a comprehensive understanding of graph reduction methods, including graph sparsification, graph coarsening, and graph condensation. Specifically, we establish a unified definition for these methods and introduce a hierarchical taxonomy to categorize the challenges they address. Our survey then systematically reviews the technical details of these methods and emphasizes their practical applications across diverse scenarios. Furthermore, we outline critical research directions to ensure the continued effectiveness of graph reduction techniques, as well as provide a comprehensive paper list at https://github.
&lt;/p&gt;</description></item><item><title>&#35770;&#25991;&#30740;&#31350;&#20102;&#22312;&#39044;&#27979;&#31639;&#27861;&#33539;&#24335;&#19979;&#35774;&#35745;&#25903;&#25345;&#39030;&#28857;&#22833;&#36133;&#30340;&#36830;&#36890;&#24615;&#39044;&#27979;&#22120;&#30340;&#38382;&#39064;&#65292;&#24182;&#25552;&#20986;&#20102;&#19968;&#31181;&#25968;&#25454;&#32467;&#26500;&#65292;&#33021;&#22815;&#20197;&#39044;&#22788;&#29702;&#26102;&#38388;&#21644;&#26597;&#35810;&#26102;&#38388;&#30340;&#22810;&#39033;&#24335;&#20851;&#31995;&#26469;&#22788;&#29702;&#22833;&#36133;&#39030;&#28857;&#38598;&#21512;&#12290;</title><link>https://arxiv.org/abs/2312.08489</link><description>&lt;p&gt;
&#39044;&#27979;&#39030;&#28857;&#22833;&#36133;&#30340;&#36830;&#36890;&#24615;&#39044;&#27979;&#22120;
&lt;/p&gt;
&lt;p&gt;
Connectivity Oracles for Predictable Vertex Failures
&lt;/p&gt;
&lt;p&gt;
https://arxiv.org/abs/2312.08489
&lt;/p&gt;
&lt;p&gt;
&#35770;&#25991;&#30740;&#31350;&#20102;&#22312;&#39044;&#27979;&#31639;&#27861;&#33539;&#24335;&#19979;&#35774;&#35745;&#25903;&#25345;&#39030;&#28857;&#22833;&#36133;&#30340;&#36830;&#36890;&#24615;&#39044;&#27979;&#22120;&#30340;&#38382;&#39064;&#65292;&#24182;&#25552;&#20986;&#20102;&#19968;&#31181;&#25968;&#25454;&#32467;&#26500;&#65292;&#33021;&#22815;&#20197;&#39044;&#22788;&#29702;&#26102;&#38388;&#21644;&#26597;&#35810;&#26102;&#38388;&#30340;&#22810;&#39033;&#24335;&#20851;&#31995;&#26469;&#22788;&#29702;&#22833;&#36133;&#39030;&#28857;&#38598;&#21512;&#12290;
&lt;/p&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;p&gt;
&#35774;&#35745;&#25903;&#25345;&#39030;&#28857;&#22833;&#36133;&#30340;&#36830;&#36890;&#24615;&#39044;&#27979;&#22120;&#26159;&#38024;&#23545;&#26080;&#21521;&#22270;&#30340;&#22522;&#26412;&#25968;&#25454;&#32467;&#26500;&#38382;&#39064;&#20043;&#19968;&#12290;&#24050;&#26377;&#30340;&#30740;&#31350;&#22312;&#26597;&#35810;&#26102;&#38388;&#26041;&#38754;&#24050;&#32463;&#26377;&#20102;&#24456;&#22909;&#30340;&#29702;&#35299;&#65306;&#20197;&#21069;&#30340;&#20316;&#21697;[Duan-Pettie STOC'10; Long-Saranurak FOCS'22]&#23454;&#29616;&#20102;&#19982;&#22833;&#36133;&#39030;&#28857;&#25968;&#37327;&#25104;&#32447;&#24615;&#20851;&#31995;&#30340;&#26597;&#35810;&#26102;&#38388;&#65292;&#24182;&#19988;&#22312;&#38656;&#35201;&#22810;&#39033;&#24335;&#26102;&#38388;&#30340;&#39044;&#22788;&#29702;&#21644;&#22810;&#39033;&#24335;&#26102;&#38388;&#30340;&#26356;&#26032;&#30340;&#26465;&#20214;&#19979;&#26159;&#26377;&#26465;&#20214;&#26368;&#20248;&#30340;&#12290;&#25105;&#20204;&#22312;&#39044;&#27979;&#31639;&#27861;&#30340;&#33539;&#24335;&#19979;&#37325;&#26032;&#23457;&#35270;&#20102;&#36825;&#20010;&#38382;&#39064;&#65306;&#25105;&#20204;&#38382;&#65292;&#22914;&#26524;&#21487;&#20197;&#39044;&#27979;&#21040;&#22833;&#36133;&#39030;&#28857;&#38598;&#21512;&#65292;&#26597;&#35810;&#26102;&#38388;&#26159;&#21542;&#21487;&#20197;&#25552;&#39640;&#12290;&#26356;&#20855;&#20307;&#22320;&#35828;&#65292;&#25105;&#20204;&#35774;&#35745;&#20102;&#19968;&#20010;&#25968;&#25454;&#32467;&#26500;&#65292;&#32473;&#23450;&#19968;&#20010;&#22270;G=(V,E)&#21644;&#19968;&#20010;&#39044;&#27979;&#20250;&#22833;&#36133;&#30340;&#39030;&#28857;&#38598;&#21512;\widehat{D} \subseteq V&#65288;&#20854;&#20013;d=|\widehat{D}|&#65289;&#65292;&#23558;&#20854;&#39044;&#22788;&#29702;&#26102;&#38388;&#20026;$\tilde{O}(d|E|)$&#65292;&#28982;&#21518;&#21487;&#20197;&#25509;&#25910;&#19968;&#20010;&#26356;&#26032;&#65292;&#35813;&#26356;&#26032;&#20197;&#23545;&#31216;&#24046;&#20998;&#24418;&#24335;&#32473;&#20986;&#12290;
&lt;/p&gt;
&lt;p&gt;
arXiv:2312.08489v2 Announce Type: replace-cross  Abstract: The problem of designing connectivity oracles supporting vertex failures is one of the basic data structures problems for undirected graphs. It is already well understood: previous works [Duan--Pettie STOC'10; Long--Saranurak FOCS'22] achieve query time linear in the number of failed vertices, and it is conditionally optimal as long as we require preprocessing time polynomial in the size of the graph and update time polynomial in the number of failed vertices.   We revisit this problem in the paradigm of algorithms with predictions: we ask if the query time can be improved if the set of failed vertices can be predicted beforehand up to a small number of errors. More specifically, we design a data structure that, given a graph $G=(V,E)$ and a set of vertices predicted to fail $\widehat{D} \subseteq V$ of size $d=|\widehat{D}|$, preprocesses it in time $\tilde{O}(d|E|)$ and then can receive an update given as the symmetric differ
&lt;/p&gt;</description></item><item><title>&#26412;&#35770;&#25991;&#25552;&#20986;&#20102;&#38024;&#23545;&#32422;&#26463;&#20849;&#21333;&#35843;&#26497;&#23567;-&#26497;&#22823;&#20248;&#21270;&#21644;&#20849;&#21333;&#35843;&#21253;&#21547;&#38382;&#39064;&#30340;&#21152;&#36895;&#31639;&#27861;&#65292;&#25193;&#23637;&#20102;&#29616;&#26377;&#31639;&#27861;&#24182;&#23454;&#29616;&#20102;&#36739;&#20248;&#30340;&#25910;&#25947;&#36895;&#29575;&#65292;&#21516;&#26102;&#35777;&#26126;&#20102;&#31639;&#27861;&#30340;&#25910;&#25947;&#24615;&#12290;</title><link>https://arxiv.org/abs/2206.05248</link><description>&lt;p&gt;
&#21152;&#36895;&#31639;&#27861;&#29992;&#20110;&#32422;&#26463;&#38750;&#20984;-&#38750;&#20985;&#26497;&#23567;-&#26497;&#22823;&#20248;&#21270;&#21644;&#20849;&#21333;&#35843;&#21253;&#21547;
&lt;/p&gt;
&lt;p&gt;
Accelerated Algorithms for Constrained Nonconvex-Nonconcave Min-Max Optimization and Comonotone Inclusion
&lt;/p&gt;
&lt;p&gt;
https://arxiv.org/abs/2206.05248
&lt;/p&gt;
&lt;p&gt;
&#26412;&#35770;&#25991;&#25552;&#20986;&#20102;&#38024;&#23545;&#32422;&#26463;&#20849;&#21333;&#35843;&#26497;&#23567;-&#26497;&#22823;&#20248;&#21270;&#21644;&#20849;&#21333;&#35843;&#21253;&#21547;&#38382;&#39064;&#30340;&#21152;&#36895;&#31639;&#27861;&#65292;&#25193;&#23637;&#20102;&#29616;&#26377;&#31639;&#27861;&#24182;&#23454;&#29616;&#20102;&#36739;&#20248;&#30340;&#25910;&#25947;&#36895;&#29575;&#65292;&#21516;&#26102;&#35777;&#26126;&#20102;&#31639;&#27861;&#30340;&#25910;&#25947;&#24615;&#12290;
&lt;/p&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;p&gt;
&#25105;&#20204;&#30740;&#31350;&#20102;&#32422;&#26463;&#20849;&#21333;&#35843;&#26497;&#23567;-&#26497;&#22823;&#20248;&#21270;&#65292;&#19968;&#31867;&#32467;&#26500;&#21270;&#30340;&#38750;&#20984;-&#38750;&#20985;&#26497;&#23567;-&#26497;&#22823;&#20248;&#21270;&#38382;&#39064;&#20197;&#21450;&#23427;&#20204;&#23545;&#20849;&#21333;&#35843;&#21253;&#21547;&#30340;&#25512;&#24191;&#12290;&#22312;&#25105;&#20204;&#30340;&#31532;&#19968;&#20010;&#36129;&#29486;&#20013;&#65292;&#25105;&#20204;&#23558;&#26368;&#21021;&#30001;Yoon&#21644;Ryu&#65288;2021&#65289;&#25552;&#20986;&#30340;&#26080;&#32422;&#26463;&#26497;&#23567;-&#26497;&#22823;&#20248;&#21270;&#30340;Extra Anchored Gradient&#65288;EAG&#65289;&#31639;&#27861;&#25193;&#23637;&#21040;&#32422;&#26463;&#20849;&#21333;&#35843;&#26497;&#23567;-&#26497;&#22823;&#20248;&#21270;&#21644;&#20849;&#21333;&#35843;&#21253;&#21547;&#38382;&#39064;&#65292;&#24182;&#23454;&#29616;&#20102;&#25152;&#26377;&#19968;&#38454;&#26041;&#27861;&#20013;&#30340;&#26368;&#20248;&#25910;&#25947;&#36895;&#29575;$O\left(\frac{1}{T}\right)$&#12290;&#27492;&#22806;&#65292;&#25105;&#20204;&#35777;&#26126;&#20102;&#31639;&#27861;&#30340;&#36845;&#20195;&#25910;&#25947;&#21040;&#35299;&#38598;&#20013;&#30340;&#19968;&#20010;&#28857;&#12290;&#22312;&#25105;&#20204;&#30340;&#31532;&#20108;&#20010;&#36129;&#29486;&#20013;&#65292;&#25105;&#20204;&#23558;&#30001;Lee&#21644;Kim&#65288;2021&#65289;&#24320;&#21457;&#30340;&#24555;&#36895;&#39069;&#22806;&#26799;&#24230;&#65288;FEG&#65289;&#31639;&#27861;&#25193;&#23637;&#21040;&#32422;&#26463;&#20849;&#21333;&#35843;&#26497;&#23567;-&#26497;&#22823;&#20248;&#21270;&#21644;&#20849;&#21333;&#35843;&#21253;&#21547;&#65292;&#24182;&#23454;&#29616;&#20102;&#30456;&#21516;&#30340;$O\left(\frac{1}{T}\right)$&#25910;&#25947;&#36895;&#29575;&#12290;&#36825;&#20010;&#36895;&#29575;&#36866;&#29992;&#20110;&#25991;&#29486;&#20013;&#30740;&#31350;&#36807;&#30340;&#26368;&#24191;&#27867;&#30340;&#20849;&#21333;&#35843;&#21253;&#21547;&#38382;&#39064;&#38598;&#21512;&#12290;&#25105;&#20204;&#30340;&#20998;&#26512;&#22522;&#20110;s&#30340;&#20869;&#23481;&#12290;
&lt;/p&gt;
&lt;p&gt;
We study constrained comonotone min-max optimization, a structured class of nonconvex-nonconcave min-max optimization problems, and their generalization to comonotone inclusion. In our first contribution, we extend the Extra Anchored Gradient (EAG) algorithm, originally proposed by Yoon and Ryu (2021) for unconstrained min-max optimization, to constrained comonotone min-max optimization and comonotone inclusion, achieving an optimal convergence rate of $O\left(\frac{1}{T}\right)$ among all first-order methods. Additionally, we prove that the algorithm's iterations converge to a point in the solution set. In our second contribution, we extend the Fast Extra Gradient (FEG) algorithm, as developed by Lee and Kim (2021), to constrained comonotone min-max optimization and comonotone inclusion, achieving the same $O\left(\frac{1}{T}\right)$ convergence rate. This rate is applicable to the broadest set of comonotone inclusion problems yet studied in the literature. Our analyses are based on s
&lt;/p&gt;</description></item><item><title>Autumn&#26159;&#19968;&#20010;&#21487;&#25193;&#23637;&#30340;&#12289;&#38754;&#21521;&#35835;&#25805;&#20316;&#20248;&#21270;&#30340;LSM-tree&#38190;&#20540;&#23384;&#20648;&#24341;&#25806;&#65292;&#20854;&#21019;&#26032;&#20043;&#22788;&#22312;&#20110;&#36890;&#36807;&#21160;&#24577;&#35843;&#25972;&#30456;&#37051;&#20004;&#23618;&#20043;&#38388;&#30340;&#23481;&#37327;&#27604;&#26469;&#19981;&#26029;&#25552;&#39640;&#35835;&#24615;&#33021;&#65292;&#20351;&#24471;&#28857;&#35835;&#21644;&#21306;&#38388;&#35835;&#25104;&#26412;&#20174;&#20043;&#21069;&#26368;&#20248;&#30340;$O(logN)$&#22797;&#26434;&#24230;&#20248;&#21270;&#21040;&#20102;$O(\sqrt{logN})$&#12290;</title><link>http://arxiv.org/abs/2305.05074</link><description>&lt;p&gt;
Autumn&#65306;&#22522;&#20110;LSM-tree&#30340;&#21487;&#25193;&#23637;&#30340;&#38754;&#21521;&#35835;&#25805;&#20316;&#20248;&#21270;&#30340;&#38190;&#20540;&#23384;&#20648;&#24341;&#25806;
&lt;/p&gt;
&lt;p&gt;
Autumn: A Scalable Read Optimized LSM-tree based Key-Value Stores with Fast Point and Range Read Speed. (arXiv:2305.05074v1 [cs.DB])
&lt;/p&gt;
&lt;p&gt;
http://arxiv.org/abs/2305.05074
&lt;/p&gt;
&lt;p&gt;
Autumn&#26159;&#19968;&#20010;&#21487;&#25193;&#23637;&#30340;&#12289;&#38754;&#21521;&#35835;&#25805;&#20316;&#20248;&#21270;&#30340;LSM-tree&#38190;&#20540;&#23384;&#20648;&#24341;&#25806;&#65292;&#20854;&#21019;&#26032;&#20043;&#22788;&#22312;&#20110;&#36890;&#36807;&#21160;&#24577;&#35843;&#25972;&#30456;&#37051;&#20004;&#23618;&#20043;&#38388;&#30340;&#23481;&#37327;&#27604;&#26469;&#19981;&#26029;&#25552;&#39640;&#35835;&#24615;&#33021;&#65292;&#20351;&#24471;&#28857;&#35835;&#21644;&#21306;&#38388;&#35835;&#25104;&#26412;&#20174;&#20043;&#21069;&#26368;&#20248;&#30340;$O(logN)$&#22797;&#26434;&#24230;&#20248;&#21270;&#21040;&#20102;$O(\sqrt{logN})$&#12290;
&lt;/p&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;p&gt;
&#22522;&#20110;Log Structured Merge Trees (LSM-tree)&#30340;&#38190;&#20540;&#23384;&#20648;&#24341;&#25806;&#34987;&#24191;&#27867;&#24212;&#29992;&#20110;&#35768;&#22810;&#23384;&#20648;&#31995;&#32479;&#20013;&#65292;&#20197;&#25903;&#25345;&#26356;&#26032;&#12289;&#28857;&#35835;&#21644;&#21306;&#38388;&#35835;&#31561;&#21508;&#31181;&#25805;&#20316;&#12290;&#26412;&#25991;&#20013;&#65292;&#25105;&#20204;&#25552;&#20986;&#20102;&#19968;&#20010;&#21517;&#20026;Autumn&#30340;&#21487;&#25193;&#23637;&#30340;&#12289;&#38754;&#21521;&#35835;&#25805;&#20316;&#20248;&#21270;&#30340;&#22522;&#20110;LSM-tree&#30340;&#38190;&#20540;&#23384;&#20648;&#24341;&#25806;&#65292;&#23427;&#20855;&#26377;&#26368;&#23569;&#30340;&#28857;&#35835;&#21644;&#21306;&#38388;&#35835;&#25104;&#26412;&#12290;&#36890;&#36807;&#21160;&#24577;&#35843;&#25972;&#30456;&#37051;&#20004;&#23618;&#20043;&#38388;&#30340;&#23481;&#37327;&#27604;&#26469;&#19981;&#26029;&#25552;&#39640;&#35835;&#24615;&#33021;&#65292;&#28857;&#35835;&#21644;&#21306;&#38388;&#35835;&#25104;&#26412;&#20174;&#20043;&#21069;&#26368;&#20248;&#30340;$O(logN)$&#22797;&#26434;&#24230;&#20248;&#21270;&#21040;&#20102;$O(\sqrt{logN})$&#65292;&#24182;&#24212;&#29992;&#20102;&#26032;&#30340;Garnering&#21512;&#24182;&#31574;&#30053;&#12290;Autumn&#26159;&#19968;&#20010;&#21487;&#25193;&#23637;&#30340;&#12289;&#38754;&#21521;&#35835;&#25805;&#20316;&#20248;&#21270;&#30340;LSM-tree&#38190;&#20540;&#23384;&#20648;&#24341;&#25806;&#12290;
&lt;/p&gt;
&lt;p&gt;
The Log Structured Merge Trees (LSM-tree) based key-value stores are widely used in many storage systems to support a variety of operations such as updates, point reads, and range reads. Traditionally, LSM-tree's merge policy organizes data into multiple levels of exponentially increasing capacity to support high-speed writes. However, we contend that the traditional merge policies are not optimized for reads. In this work, we present Autumn, a scalable and read optimized LSM-tree based key-value stores with minimal point and range read cost. The key idea in improving the read performance is to dynamically adjust the capacity ratio between two adjacent levels as more data are stored. As a result, smaller levels gradually increase their capacities and merge more often. In particular, the point and range read cost improves from the previous best known $O(logN)$ complexity to $O(\sqrt{logN})$ in Autumn by applying the new novel Garnering merge policy. While Garnering merge policy optimize
&lt;/p&gt;</description></item></channel></rss>