<rss version="2.0"><channel><title>Chat Arxiv cs.DS</title><link>https://github.com/qhduan/cn-chat-arxiv</link><description>This is arxiv RSS feed for cs.DS</description><item><title>&#26412;&#35770;&#25991;&#20171;&#32461;&#20102;&#19968;&#31181;&#22522;&#20110;&#22810;&#39033;&#24335;&#22522;&#25968;2&#25351;&#25968;&#38598;&#21512;&#30340;&#24555;&#36895;&#20056;&#27861;&#26041;&#27861;&#65292;&#22312;&#29305;&#23450;&#20301;&#25968;&#33539;&#22260;&#20869;&#27604;&#20256;&#32479;&#26041;&#27861;&#26356;&#24555;&#12290;&#35813;&#26041;&#27861;&#25226;&#25968;&#23383;&#34920;&#31034;&#20026;&#25972;&#25968;&#32034;&#24341;&#21015;&#34920;&#65292;&#24182;&#23454;&#29616;&#20102;&#20998;&#24067;&#24335;&#35745;&#31639;&#12290;</title><link>https://arxiv.org/abs/2311.09922</link><description>&lt;p&gt;
&#36890;&#36807;&#37319;&#29992;&#25972;&#25968;&#21015;&#34920;&#20316;&#20026;&#22810;&#39033;&#24335;&#22522;&#25968;2&#25351;&#25968;&#30340;&#38598;&#21512;&#26469;&#23454;&#29616;&#24555;&#36895;&#20056;&#27861;
&lt;/p&gt;
&lt;p&gt;
Fast multiplication by two's complement addition of numbers represented as a set of polynomial radix 2 indexes, stored as an integer list for massively parallel computation
&lt;/p&gt;
&lt;p&gt;
https://arxiv.org/abs/2311.09922
&lt;/p&gt;
&lt;p&gt;
&#26412;&#35770;&#25991;&#20171;&#32461;&#20102;&#19968;&#31181;&#22522;&#20110;&#22810;&#39033;&#24335;&#22522;&#25968;2&#25351;&#25968;&#38598;&#21512;&#30340;&#24555;&#36895;&#20056;&#27861;&#26041;&#27861;&#65292;&#22312;&#29305;&#23450;&#20301;&#25968;&#33539;&#22260;&#20869;&#27604;&#20256;&#32479;&#26041;&#27861;&#26356;&#24555;&#12290;&#35813;&#26041;&#27861;&#25226;&#25968;&#23383;&#34920;&#31034;&#20026;&#25972;&#25968;&#32034;&#24341;&#21015;&#34920;&#65292;&#24182;&#23454;&#29616;&#20102;&#20998;&#24067;&#24335;&#35745;&#31639;&#12290;
&lt;/p&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;p&gt;
&#25105;&#20204;&#28436;&#31034;&#20102;&#19968;&#31181;&#22522;&#20110;&#29992;&#25972;&#25968;&#21015;&#34920;&#34920;&#31034;&#30340;&#22810;&#39033;&#24335;&#22522;&#25968;2&#25351;&#25968;&#38598;&#21512;&#30340;&#20056;&#27861;&#26041;&#27861;&#12290;&#35813;&#26041;&#27861;&#37319;&#29992;python&#20195;&#30721;&#23454;&#29616;&#20102;&#19968;&#32452;&#31639;&#27861;&#12290;&#25105;&#20204;&#23637;&#31034;&#20102;&#35813;&#26041;&#27861;&#22312;&#26576;&#19968;&#20301;&#25968;&#33539;&#22260;&#20869;&#27604;&#25968;&#35770;&#21464;&#25442;(NTT)&#21644;&#21345;&#25289;&#33576;&#24052;(Karatsuba)&#20056;&#27861;&#26356;&#24555;&#12290;&#25105;&#20204;&#36824;&#23454;&#29616;&#20102;&#29992;python&#20195;&#30721;&#36827;&#34892;&#27604;&#36739;&#65292;&#19982;&#22810;&#39033;&#24335;&#22522;&#25968;2&#25972;&#25968;&#26041;&#27861;&#36827;&#34892;&#27604;&#36739;&#12290;&#25105;&#20204;&#23637;&#31034;&#20102;&#20219;&#20309;&#25972;&#25968;&#25110;&#23454;&#25968;&#37117;&#21487;&#20197;&#34920;&#31034;&#20026;&#25972;&#25968;&#32034;&#24341;&#21015;&#34920;&#65292;&#34920;&#31034;&#20108;&#36827;&#21046;&#20013;&#30340;&#26377;&#38480;&#32423;&#25968;&#12290;&#35813;&#25968;&#23383;&#30340;&#25972;&#25968;&#32034;&#24341;&#26377;&#38480;&#32423;&#25968;&#21487;&#20197;&#23384;&#20648;&#21644;&#20998;&#24067;&#22312;&#22810;&#20010;CPU / GPU&#19978;&#12290;&#25105;&#20204;&#23637;&#31034;&#20102;&#21152;&#27861;&#21644;&#20056;&#27861;&#36816;&#31639;&#21487;&#20197;&#24212;&#29992;&#20110;&#20316;&#20026;&#32034;&#24341;&#25972;&#25968;&#34920;&#31034;&#30340;&#20004;&#20010;&#34917;&#30721;&#21152;&#27861;&#65292;&#24182;&#21487;&#20197;&#23436;&#20840;&#20998;&#24067;&#22312;&#32473;&#23450;&#30340;CPU / GPU&#26550;&#26500;&#19978;&#12290;&#25105;&#20204;&#23637;&#31034;&#20102;&#23436;&#20840;&#30340;&#20998;&#24067;&#24615;&#33021;&#12290;
&lt;/p&gt;
&lt;p&gt;
We demonstrate a multiplication method based on numbers represented as set of polynomial radix 2 indices stored as an integer list. The 'polynomial integer index multiplication' method is a set of algorithms implemented in python code. We demonstrate the method to be faster than both the Number Theoretic Transform (NTT) and Karatsuba for multiplication within a certain bit range. Also implemented in python code for comparison purposes with the polynomial radix 2 integer method. We demonstrate that it is possible to express any integer or real number as a list of integer indices, representing a finite series in base two. The finite series of integer index representation of a number can then be stored and distributed across multiple CPUs / GPUs. We show that operations of addition and multiplication can be applied as two's complement additions operating on the index integer representations and can be fully distributed across a given CPU / GPU architecture. We demonstrate fully distribute
&lt;/p&gt;</description></item><item><title>&#25552;&#20986;&#20102;&#19968;&#31181;&#22522;&#20110;&#28151;&#21512;trie&#30340;&#20869;&#23384;&#39640;&#25928;&#24207;&#21015;&#27169;&#24335;&#25366;&#25496;&#26041;&#27861;&#65292;&#22312;&#20869;&#23384;&#28040;&#32791;&#21644;&#35745;&#31639;&#26102;&#38388;&#26041;&#38754;&#30456;&#27604;&#29616;&#26377;&#25216;&#26415;&#26377;&#26174;&#33879;&#25913;&#21892;&#65292;&#19988;&#26159;&#21807;&#19968;&#19968;&#20010;&#33021;&#22815;&#22788;&#29702;256GB&#31995;&#32479;&#20869;&#23384;&#19979;&#22823;&#25968;&#25454;&#38598;&#30340;&#26041;&#27861;&#12290;</title><link>https://arxiv.org/abs/2202.06834</link><description>&lt;p&gt;
&#22522;&#20110;&#28151;&#21512;Tries&#30340;&#20869;&#23384;&#39640;&#25928;&#24207;&#21015;&#27169;&#24335;&#25366;&#25496;
&lt;/p&gt;
&lt;p&gt;
Memory-Efficient Sequential Pattern Mining with Hybrid Tries
&lt;/p&gt;
&lt;p&gt;
https://arxiv.org/abs/2202.06834
&lt;/p&gt;
&lt;p&gt;
&#25552;&#20986;&#20102;&#19968;&#31181;&#22522;&#20110;&#28151;&#21512;trie&#30340;&#20869;&#23384;&#39640;&#25928;&#24207;&#21015;&#27169;&#24335;&#25366;&#25496;&#26041;&#27861;&#65292;&#22312;&#20869;&#23384;&#28040;&#32791;&#21644;&#35745;&#31639;&#26102;&#38388;&#26041;&#38754;&#30456;&#27604;&#29616;&#26377;&#25216;&#26415;&#26377;&#26174;&#33879;&#25913;&#21892;&#65292;&#19988;&#26159;&#21807;&#19968;&#19968;&#20010;&#33021;&#22815;&#22788;&#29702;256GB&#31995;&#32479;&#20869;&#23384;&#19979;&#22823;&#25968;&#25454;&#38598;&#30340;&#26041;&#27861;&#12290;
&lt;/p&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;p&gt;
&#38543;&#30528;&#29616;&#20195;&#25968;&#25454;&#38598;&#30340;&#25351;&#25968;&#32423;&#22686;&#38271;&#65292;&#23545;&#20110;&#33021;&#22815;&#22788;&#29702;&#22914;&#27492;&#24222;&#22823;&#25968;&#25454;&#38598;&#30340;&#39640;&#25928;&#25366;&#25496;&#31639;&#27861;&#30340;&#38656;&#27714;&#21464;&#24471;&#26085;&#30410;&#36843;&#20999;&#12290;&#26412;&#25991;&#25552;&#20986;&#20102;&#19968;&#31181;&#20869;&#23384;&#39640;&#25928;&#30340;&#26041;&#27861;&#29992;&#20110;&#24207;&#21015;&#27169;&#24335;&#25366;&#25496;&#65288;SPM&#65289;&#65292;&#36825;&#26159;&#30693;&#35782;&#21457;&#29616;&#20013;&#30340;&#19968;&#20010;&#22522;&#26412;&#20027;&#39064;&#65292;&#38754;&#20020;&#30528;&#38024;&#23545;&#22823;&#25968;&#25454;&#38598;&#30340;&#24050;&#30693;&#20869;&#23384;&#29942;&#39048;&#12290;&#25105;&#20204;&#30340;&#26041;&#27861;&#28041;&#21450;&#19968;&#31181;&#26032;&#39062;&#30340;&#28151;&#21512;trie&#25968;&#25454;&#32467;&#26500;&#65292;&#21033;&#29992;&#37325;&#22797;&#27169;&#24335;&#32039;&#20945;&#22320;&#23384;&#20648;&#20869;&#23384;&#20013;&#30340;&#25968;&#25454;&#38598;; &#20197;&#21450;&#19968;&#20010;&#30456;&#24212;&#30340;&#25366;&#25496;&#31639;&#27861;&#65292;&#26088;&#22312;&#26377;&#25928;&#22320;&#20174;&#27492;&#32039;&#20945;&#34920;&#31034;&#20013;&#25552;&#21462;&#27169;&#24335;&#12290;&#23545;&#30495;&#23454;&#27979;&#35797;&#23454;&#20363;&#30340;&#25968;&#20540;&#32467;&#26524;&#26174;&#31034;&#65292;&#19982;&#26368;&#20808;&#36827;&#25216;&#26415;&#30456;&#27604;&#65292;&#23545;&#20110;&#23567;&#21040;&#20013;&#31561;&#22823;&#23567;&#30340;&#25968;&#25454;&#38598;&#65292;&#20869;&#23384;&#28040;&#32791;&#24179;&#22343;&#25552;&#39640;&#20102;88&#65285;&#65292;&#35745;&#31639;&#26102;&#38388;&#25552;&#39640;&#20102;41&#65285;&#12290;&#27492;&#22806;&#65292;&#25105;&#20204;&#30340;&#31639;&#27861;&#26159;&#21807;&#19968;&#19968;&#20010;&#22312;&#31995;&#32479;&#20869;&#23384;&#20026;256GB&#30340;&#24773;&#20917;&#19979;&#33021;&#22815;&#22788;&#29702;&#22823;&#25968;&#25454;&#38598;&#30340;SPM&#26041;&#27861;&#12290;
&lt;/p&gt;
&lt;p&gt;
arXiv:2202.06834v2 Announce Type: replace-cross  Abstract: As modern data sets continue to grow exponentially in size, the demand for efficient mining algorithms capable of handling such large data sets becomes increasingly imperative. This paper develops a memory-efficient approach for Sequential Pattern Mining (SPM), a fundamental topic in knowledge discovery that faces a well-known memory bottleneck for large data sets. Our methodology involves a novel hybrid trie data structure that exploits recurring patterns to compactly store the data set in memory; and a corresponding mining algorithm designed to effectively extract patterns from this compact representation. Numerical results on real-life test instances show an average improvement of 88% in memory consumption and 41% in computation time for small to medium-sized data sets compared to the state of the art. Furthermore, our algorithm stands out as the only capable SPM approach for large data sets within 256GB of system memory.
&lt;/p&gt;</description></item><item><title>&#26412;&#25991;&#30740;&#31350;&#20102;&#22312;&#22270;&#20013;&#29699;&#30340;&#27010;&#24565;&#31867;&#20013;&#30340;&#38750;&#20914;&#31361;&#25945;&#23398;&#22270;&#65292;&#24182;&#35777;&#26126;&#20102;&#30456;&#20851;&#20915;&#31574;&#38382;&#39064;{\sc B-NCTD$^+$}&#26159;NP&#23436;&#20840;&#30340;&#12290;</title><link>http://arxiv.org/abs/2309.02876</link><description>&lt;p&gt;
&#38750;&#20914;&#31361;&#25945;&#23398;&#22270;&#22312;&#22270;&#20013;&#29699;&#30340;&#24212;&#29992;&#30740;&#31350;
&lt;/p&gt;
&lt;p&gt;
Non-Clashing Teaching Maps for Balls in Graphs. (arXiv:2309.02876v1 [cs.CC])
&lt;/p&gt;
&lt;p&gt;
http://arxiv.org/abs/2309.02876
&lt;/p&gt;
&lt;p&gt;
&#26412;&#25991;&#30740;&#31350;&#20102;&#22312;&#22270;&#20013;&#29699;&#30340;&#27010;&#24565;&#31867;&#20013;&#30340;&#38750;&#20914;&#31361;&#25945;&#23398;&#22270;&#65292;&#24182;&#35777;&#26126;&#20102;&#30456;&#20851;&#20915;&#31574;&#38382;&#39064;{\sc B-NCTD$^+$}&#26159;NP&#23436;&#20840;&#30340;&#12290;
&lt;/p&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;p&gt;
&#26368;&#36817;&#65292;Kirkpatrick&#31561;&#20154;[ALT 2019]&#21644;Fallat&#31561;&#20154;[JMLR 2023]&#24341;&#20837;&#20102;&#38750;&#20914;&#31361;&#25945;&#23398;&#65292;&#24182;&#34920;&#26126;&#23427;&#26159;&#28385;&#36275;Goldman&#21644;Mathias&#25552;&#20986;&#30340;&#38450;&#27490;&#21246;&#32467;&#22522;&#20934;&#30340;&#26368;&#39640;&#25928;&#30340;&#26426;&#22120;&#25945;&#23398;&#27169;&#22411;&#12290;&#23545;&#20110;&#19968;&#20010;&#27010;&#24565;&#31867;$\cal{C}$&#26469;&#35828;&#65292;&#25945;&#23398;&#22270;$T$&#23558;&#19968;&#20010;&#65288;&#25945;&#23398;&#65289;&#38598;&#21512;$T(C)$&#20998;&#37197;&#32473;&#27599;&#20010;&#27010;&#24565;$C \in \cal{C}$&#12290;&#22914;&#26524;&#27809;&#26377;&#19968;&#23545;&#27010;&#24565;&#19982;&#23427;&#20204;&#30340;&#25945;&#23398;&#38598;&#21512;&#30340;&#24182;&#19968;&#33268;&#65292;&#21017;&#25945;&#23398;&#22270;&#26159;&#38750;&#20914;&#31361;&#30340;&#12290;&#38750;&#20914;&#31361;&#25945;&#23398;&#22270;&#65288;NCTM&#65289;$T$&#30340;&#22823;&#23567;&#26159;$T(C)$&#20013;&#30340;&#26368;&#22823;&#22823;&#23567;&#65292;&#20854;&#20013;$C \in \cal{C}$&#12290;&#27010;&#24565;&#31867;$\mathcal{B}(G)$&#30340;&#38750;&#20914;&#31361;&#25945;&#23398;&#32500;&#24230;NCTD$(\cal{C})$&#26159;$\cal{C}$&#30340;&#19968;&#20010;NCTM&#30340;&#26368;&#23567;&#22823;&#23567;&#12290;&#31867;&#20284;&#22320;&#65292;NCTM$^+$&#21644;NCTD$^+(\cal{C})$&#30340;&#23450;&#20041;&#26159;&#31867;&#20284;&#30340;&#65292;&#21482;&#26159;&#25945;&#24072;&#21482;&#33021;&#20351;&#29992;&#27491;&#20363;&#12290;&#25105;&#20204;&#30740;&#31350;&#20102;&#30001;&#22270;$G$&#30340;&#25152;&#26377;&#29699;&#32452;&#25104;&#30340;&#27010;&#24565;&#31867;$\mathcal{B}(G)$&#30340;NCTMs&#21644;NCTM$^+$s&#12290;&#25105;&#20204;&#35777;&#26126;&#20102;&#19982;NCTD$^+$&#30340;&#30456;&#20851;&#20915;&#31574;&#38382;&#39064;{\sc B-NCTD$^+$}&#26159;NP&#23436;&#20840;&#30340;&#12290;
&lt;/p&gt;
&lt;p&gt;
Recently, Kirkpatrick et al. [ALT 2019] and Fallat et al. [JMLR 2023] introduced non-clashing teaching and showed it to be the most efficient machine teaching model satisfying the benchmark for collusion-avoidance set by Goldman and Mathias. A teaching map $T$ for a concept class $\cal{C}$ assigns a (teaching) set $T(C)$ of examples to each concept $C \in \cal{C}$. A teaching map is non-clashing if no pair of concepts are consistent with the union of their teaching sets. The size of a non-clashing teaching map (NCTM) $T$ is the maximum size of a $T(C)$, $C \in \cal{C}$. The non-clashing teaching dimension NCTD$(\cal{C})$ of $\cal{C}$ is the minimum size of an NCTM for $\cal{C}$. NCTM$^+$ and NCTD$^+(\cal{C})$ are defined analogously, except the teacher may only use positive examples.  We study NCTMs and NCTM$^+$s for the concept class $\mathcal{B}(G)$ consisting of all balls of a graph $G$. We show that the associated decision problem {\sc B-NCTD$^+$} for NCTD$^+$ is NP-complete in spl
&lt;/p&gt;</description></item></channel></rss>