<rss version="2.0"><channel><title>Chat Arxiv cs.AR</title><link>https://github.com/qhduan/cn-chat-arxiv</link><description>This is arxiv RSS feed for cs.AR</description><item><title>&#26412;&#25991;&#30740;&#31350;&#20102;&#20877;&#29983;&#20154;&#24037;&#26234;&#33021;&#20013;&#30828;&#20214;&#35774;&#35745;&#20013;CWEs&#30340;&#24418;&#24335;&#39564;&#35777;&#65292;&#21457;&#29616;&#22823;&#22810;&#25968;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;&#22312;&#29983;&#25104;&#30828;&#20214;&#20195;&#30721;&#26102;&#24182;&#26410;&#32771;&#34385;&#30828;&#20214;CWEs&#65292;&#23548;&#33268;&#22823;&#32422;60%&#30340;&#30828;&#20214;&#35774;&#35745;&#23384;&#22312;&#28431;&#27934;&#12290;</title><link>https://arxiv.org/abs/2403.16750</link><description>&lt;p&gt;
&#20154;&#24037;&#24635;&#31639;&#19981;&#37027;&#20040;&#26234;&#33021;&#65306;&#20174;&#24418;&#24335;&#39564;&#35777;&#30340;&#35282;&#24230;&#30475;GenAI
&lt;/p&gt;
&lt;p&gt;
All Artificial, Less Intelligence: GenAI through the Lens of Formal Verification
&lt;/p&gt;
&lt;p&gt;
https://arxiv.org/abs/2403.16750
&lt;/p&gt;
&lt;p&gt;
&#26412;&#25991;&#30740;&#31350;&#20102;&#20877;&#29983;&#20154;&#24037;&#26234;&#33021;&#20013;&#30828;&#20214;&#35774;&#35745;&#20013;CWEs&#30340;&#24418;&#24335;&#39564;&#35777;&#65292;&#21457;&#29616;&#22823;&#22810;&#25968;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;&#22312;&#29983;&#25104;&#30828;&#20214;&#20195;&#30721;&#26102;&#24182;&#26410;&#32771;&#34385;&#30828;&#20214;CWEs&#65292;&#23548;&#33268;&#22823;&#32422;60%&#30340;&#30828;&#20214;&#35774;&#35745;&#23384;&#22312;&#28431;&#27934;&#12290;
&lt;/p&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;p&gt;
&#29616;&#20195;&#30828;&#20214;&#35774;&#35745;&#21464;&#24471;&#36234;&#26469;&#36234;&#39640;&#25928;&#21644;&#22797;&#26434;&#12290;&#28982;&#32780;&#65292;&#23427;&#20204;&#24120;&#24120;&#23481;&#26131;&#21463;&#21040;&#24120;&#35265;&#24369;&#28857;&#26522;&#20030;&#65288;CWEs&#65289;&#30340;&#24433;&#21709;&#12290;&#26412;&#25991;&#20851;&#27880;&#30340;&#26159;&#22312;&#30001;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;&#65288;LLMs&#65289;&#36171;&#33021;&#30340;&#20877;&#29983;&#20154;&#24037;&#26234;&#33021;&#65288;AI&#65289;&#20013;&#65292;&#23545;&#19968;&#32452;&#29992;SystemVerilog&#32534;&#20889;&#30340;&#30828;&#20214;&#35774;&#35745;&#20013;CWEs&#30340;&#24418;&#24335;&#39564;&#35777;&#12290;&#25105;&#20204;&#24212;&#29992;&#24418;&#24335;&#39564;&#35777;&#26469;&#23558;&#27599;&#20010;&#30828;&#20214;&#35774;&#35745;&#20998;&#31867;&#20026;&#26131;&#21463;&#25915;&#20987;&#25110;&#26080;CWE&#12290;&#36825;&#20010;&#25968;&#25454;&#38598;&#26159;&#30001;4&#20010;&#19981;&#21516;&#30340;LLMs&#29983;&#25104;&#30340;&#65292;&#20026;&#25105;&#20204;&#35770;&#25991;&#20013;&#38024;&#23545;&#30340;10&#31181;CWE&#20013;&#30340;&#27599;&#19968;&#31181;&#29305;&#24615;&#35774;&#35745;&#20102;&#19968;&#32452;&#29420;&#29305;&#30340;&#35774;&#35745;&#12290;&#25105;&#20204;&#23558;&#35782;&#21035;&#20986;&#30340;&#28431;&#27934;&#19982;CWE&#32534;&#21495;&#20851;&#32852;&#65292;&#29992;&#20110;60,000&#20010;&#29983;&#25104;&#30340;SystemVerilog&#23492;&#23384;&#22120;&#20256;&#36755;&#32423;&#65288;RTL&#65289;&#20195;&#30721;&#30340;&#25968;&#25454;&#38598;&#12290;&#30740;&#31350;&#36824;&#21457;&#29616;&#65292;&#22823;&#22810;&#25968;LLMs&#24182;&#19981;&#30693;&#36947;&#20219;&#20309;&#30828;&#20214;CWEs&#65307;&#22240;&#27492;&#65292;&#23427;&#20204;&#36890;&#24120;&#22312;&#29983;&#25104;&#30828;&#20214;&#20195;&#30721;&#26102;&#19981;&#20104;&#32771;&#34385;&#12290;&#25105;&#20204;&#30340;&#30740;&#31350;&#26174;&#31034;&#65292;&#22823;&#32422;60%&#30001;LLMs&#29983;&#25104;&#30340;&#30828;&#20214;&#35774;&#35745;&#23384;&#22312;&#28431;&#27934;&#12290;
&lt;/p&gt;
&lt;p&gt;
arXiv:2403.16750v1 Announce Type: new  Abstract: Modern hardware designs have grown increasingly efficient and complex. However, they are often susceptible to Common Weakness Enumerations (CWEs). This paper is focused on the formal verification of CWEs in a dataset of hardware designs written in SystemVerilog from Regenerative Artificial Intelligence (AI) powered by Large Language Models (LLMs). We applied formal verification to categorize each hardware design as vulnerable or CWE-free. This dataset was generated by 4 different LLMs and features a unique set of designs for each of the 10 CWEs we target in our paper. We have associated the identified vulnerabilities with CWE numbers for a dataset of 60,000 generated SystemVerilog Register Transfer Level (RTL) code. It was also found that most LLMs are not aware of any hardware CWEs; hence they are usually not considered when generating the hardware code. Our study reveals that approximately 60% of the hardware designs generated by LLMs 
&lt;/p&gt;</description></item><item><title>&#25552;&#20986;&#20102;&#19968;&#31181;&#26032;&#30340;&#20005;&#26684;&#20998;&#21306;&#35843;&#24230;&#31574;&#30053;&#65292;&#29992;&#20110;&#38646;&#26143;&#21018;&#24615;&#27969;&#24335;&#20219;&#21153;&#65292;&#36890;&#36807;&#21019;&#24314;&#19981;&#30456;&#20132;&#30340;&#20219;&#21153;&#21644;&#22788;&#29702;&#22120;&#20998;&#21306;&#65292;&#24182;&#23581;&#35797;&#23558;&#30456;&#20284;&#23481;&#37327;&#30340;&#20219;&#21153;&#20998;&#37197;&#32473;&#21516;&#19968;&#20998;&#21306;&#65292;&#20197;&#20943;&#23569;&#24178;&#25200;&#12290;</title><link>https://arxiv.org/abs/2403.10726</link><description>&lt;p&gt;
&#38024;&#23545;&#38646;&#26143;&#21018;&#24615;&#27969;&#24335;&#20219;&#21153;&#30340;&#20005;&#26684;&#20998;&#21306;&#26041;&#27861;
&lt;/p&gt;
&lt;p&gt;
Strict Partitioning for Sporadic Rigid Gang Tasks
&lt;/p&gt;
&lt;p&gt;
https://arxiv.org/abs/2403.10726
&lt;/p&gt;
&lt;p&gt;
&#25552;&#20986;&#20102;&#19968;&#31181;&#26032;&#30340;&#20005;&#26684;&#20998;&#21306;&#35843;&#24230;&#31574;&#30053;&#65292;&#29992;&#20110;&#38646;&#26143;&#21018;&#24615;&#27969;&#24335;&#20219;&#21153;&#65292;&#36890;&#36807;&#21019;&#24314;&#19981;&#30456;&#20132;&#30340;&#20219;&#21153;&#21644;&#22788;&#29702;&#22120;&#20998;&#21306;&#65292;&#24182;&#23581;&#35797;&#23558;&#30456;&#20284;&#23481;&#37327;&#30340;&#20219;&#21153;&#20998;&#37197;&#32473;&#21516;&#19968;&#20998;&#21306;&#65292;&#20197;&#20943;&#23569;&#24178;&#25200;&#12290;
&lt;/p&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;p&gt;
&#21018;&#24615;&#27969;&#24335;&#20219;&#21153;&#27169;&#22411;&#22522;&#20110;&#22312;&#22266;&#23450;&#25968;&#37327;&#30340;&#22788;&#29702;&#22120;&#19978;&#21516;&#26102;&#25191;&#34892;&#22810;&#20010;&#32447;&#31243;&#20197;&#25552;&#39640;&#25928;&#29575;&#21644;&#24615;&#33021;&#30340;&#24605;&#24819;&#12290;&#34429;&#28982;&#20840;&#23616;&#21018;&#24615;&#27969;&#24335;&#35843;&#24230;&#26377;&#22823;&#37327;&#25991;&#29486;&#65292;&#20294;&#20998;&#21306;&#26041;&#27861;&#20855;&#26377;&#20960;&#20010;&#23454;&#38469;&#20248;&#21183;&#65288;&#20363;&#22914;&#20219;&#21153;&#38548;&#31163;&#21644;&#20943;&#23569;&#35843;&#24230;&#24320;&#38144;&#65289;&#12290;&#26412;&#25991;&#25552;&#20986;&#20102;&#19968;&#31181;&#26032;&#30340;&#29992;&#20110;&#21018;&#24615;&#27969;&#24335;&#20219;&#21153;&#30340;&#20998;&#21306;&#35843;&#24230;&#31574;&#30053;&#65292;&#31216;&#20026;&#20005;&#26684;&#20998;&#21306;&#12290;&#35813;&#26041;&#27861;&#21019;&#24314;&#20219;&#21153;&#21644;&#22788;&#29702;&#22120;&#30340;&#19981;&#30456;&#20132;&#20998;&#21306;&#65292;&#20197;&#36991;&#20813;&#20998;&#21306;&#38388;&#24178;&#25200;&#12290;&#27492;&#22806;&#65292;&#23427;&#23581;&#35797;&#23558;&#20855;&#26377;&#30456;&#20284;&#23481;&#37327;&#65288;&#21363;&#24182;&#34892;&#24615;&#65289;&#30340;&#20219;&#21153;&#20998;&#37197;&#32473;&#21516;&#19968;&#20998;&#21306;&#65292;&#20197;&#20943;&#23569;&#20998;&#21306;&#20869;&#24178;&#25200;&#12290;&#22312;&#27599;&#20010;&#20998;&#21306;&#20869;&#65292;&#20219;&#21153;&#21487;&#20197;&#20351;&#29992;&#20219;&#20309;&#31867;&#22411;&#30340;&#35843;&#24230;&#22120;&#36827;&#34892;&#35843;&#24230;&#65292;&#36825;&#20801;&#35768;&#20351;&#29992;&#19981;&#37027;&#20040;&#24754;&#35266;&#30340;&#21487;&#35843;&#24230;&#27979;&#35797;&#12290;&#22823;&#37327;&#30340;&#21512;&#25104;&#23454;&#39564;&#35777;&#26126;&#21644;&#22522;&#20110;Edge TPU&#22522;&#20934;&#30340;&#26696;&#20363;&#30740;&#31350;&#26174;&#31034;
&lt;/p&gt;
&lt;p&gt;
arXiv:2403.10726v1 Announce Type: cross  Abstract: The rigid gang task model is based on the idea of executing multiple threads simultaneously on a fixed number of processors to increase efficiency and performance. Although there is extensive literature on global rigid gang scheduling, partitioned approaches have several practical advantages (e.g., task isolation and reduced scheduling overheads). In this paper, we propose a new partitioned scheduling strategy for rigid gang tasks, named strict partitioning. The method creates disjoint partitions of tasks and processors to avoid inter-partition interference. Moreover, it tries to assign tasks with similar volumes (i.e., parallelisms) to the same partition so that the intra-partition interference can be reduced. Within each partition, the tasks can be scheduled using any type of scheduler, which allows the use of a less pessimistic schedulability test. Extensive synthetic experiments and a case study based on Edge TPU benchmarks show th
&lt;/p&gt;</description></item></channel></rss>