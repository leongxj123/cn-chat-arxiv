<rss version="2.0"><channel><title>Chat Arxiv cs.AR</title><link>https://github.com/qhduan/cn-chat-arxiv</link><description>This is arxiv RSS feed for cs.AR</description><item><title>&#26412;&#25991;&#25552;&#20986;&#20102;&#19968;&#31181;&#22312;Intel GPU&#19978;&#39640;&#25928;&#30340;LLM&#25512;&#29702;&#35299;&#20915;&#26041;&#26696;&#65292;&#36890;&#36807;&#31616;&#21270;LLM&#35299;&#30721;&#23618;&#21644;&#24341;&#20837;&#20998;&#27573;KV&#32531;&#23384;&#31574;&#30053;&#65292;&#23454;&#29616;&#20102;&#20302;&#24310;&#36831;&#21644;&#39640;&#21534;&#21520;&#37327;&#12290;</title><link>http://arxiv.org/abs/2401.05391</link><description>&lt;p&gt;
&#22312;Intel GPU&#19978;&#39640;&#25928;&#30340;LLM&#25512;&#29702;&#35299;&#20915;&#26041;&#26696;
&lt;/p&gt;
&lt;p&gt;
Efficient LLM inference solution on Intel GPU. (arXiv:2401.05391v1 [cs.AR])
&lt;/p&gt;
&lt;p&gt;
http://arxiv.org/abs/2401.05391
&lt;/p&gt;
&lt;p&gt;
&#26412;&#25991;&#25552;&#20986;&#20102;&#19968;&#31181;&#22312;Intel GPU&#19978;&#39640;&#25928;&#30340;LLM&#25512;&#29702;&#35299;&#20915;&#26041;&#26696;&#65292;&#36890;&#36807;&#31616;&#21270;LLM&#35299;&#30721;&#23618;&#21644;&#24341;&#20837;&#20998;&#27573;KV&#32531;&#23384;&#31574;&#30053;&#65292;&#23454;&#29616;&#20102;&#20302;&#24310;&#36831;&#21644;&#39640;&#21534;&#21520;&#37327;&#12290;
&lt;/p&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;p&gt;
&#22522;&#20110;Transformer&#30340;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;&#65288;LLM&#65289;&#22312;&#35768;&#22810;&#39046;&#22495;&#24191;&#27867;&#24212;&#29992;&#65292;LLM&#25512;&#29702;&#30340;&#25928;&#29575;&#25104;&#20026;&#23454;&#38469;&#24212;&#29992;&#20013;&#30340;&#28909;&#38376;&#35805;&#39064;&#12290;&#28982;&#32780;&#65292;LLM&#36890;&#24120;&#22312;&#27169;&#22411;&#32467;&#26500;&#19978;&#35774;&#35745;&#22797;&#26434;&#65292;&#20855;&#26377;&#22823;&#37327;&#25805;&#20316;&#65292;&#24182;&#20197;&#33258;&#22238;&#24402;&#27169;&#24335;&#36827;&#34892;&#25512;&#29702;&#65292;&#36825;&#20351;&#24471;&#35774;&#35745;&#19968;&#20010;&#39640;&#25928;&#30340;&#31995;&#32479;&#25104;&#20026;&#19968;&#39033;&#20855;&#26377;&#25361;&#25112;&#24615;&#30340;&#20219;&#21153;&#12290;&#22312;&#26412;&#25991;&#20013;&#65292;&#25105;&#20204;&#25552;&#20986;&#20102;&#19968;&#31181;&#39640;&#25928;&#30340;LLM&#25512;&#29702;&#35299;&#20915;&#26041;&#26696;&#65292;&#20855;&#26377;&#20302;&#24310;&#36831;&#21644;&#39640;&#21534;&#21520;&#37327;&#12290;&#39318;&#20808;&#65292;&#25105;&#20204;&#36890;&#36807;&#34701;&#21512;&#25968;&#25454;&#31227;&#21160;&#21644;&#36880;&#20803;&#32032;&#25805;&#20316;&#31616;&#21270;&#20102;LLM&#35299;&#30721;&#23618;&#65292;&#20197;&#20943;&#23569;&#20869;&#23384;&#35775;&#38382;&#39057;&#29575;&#24182;&#38477;&#20302;&#31995;&#32479;&#24310;&#36831;&#12290;&#25105;&#20204;&#36824;&#25552;&#20986;&#20102;&#19968;&#31181;&#20998;&#27573;KV&#32531;&#23384;&#31574;&#30053;&#65292;&#23558;&#35831;&#27714;&#21644;&#21709;&#24212;&#20196;&#29260;&#30340;&#38190;/&#20540;&#20998;&#21035;&#20445;&#23384;&#22312;&#19981;&#21516;&#30340;&#29289;&#29702;&#20869;&#23384;&#20013;&#65292;&#20197;&#23454;&#29616;&#26377;&#25928;&#30340;&#35774;&#22791;&#20869;&#23384;&#31649;&#29702;&#65292;&#26377;&#21161;&#20110;&#22686;&#22823;&#36816;&#34892;&#26102;&#25209;&#22788;&#29702;&#22823;&#23567;&#24182;&#25552;&#39640;&#31995;&#32479;&#21534;&#21520;&#37327;&#12290;&#25105;&#20204;&#35774;&#35745;&#20102;&#19968;&#20010;&#23450;&#21046;&#30340;Scaled-Dot-Product-Attention&#20869;&#26680;&#65292;&#20197;&#21305;&#37197;&#25105;&#20204;&#30340;&#34701;&#21512;&#31574;&#30053;&#65292;&#22522;&#20110;&#20998;&#27573;KV&#32531;&#23384;&#35299;&#20915;&#26041;&#26696;&#12290;&#25105;&#20204;&#23454;&#39564;&#35777;&#26126;&#65292;&#35813;&#35299;&#20915;&#26041;&#26696;&#22312;Intel GPU&#19978;&#23454;&#29616;&#20102;&#39640;&#25928;&#30340;LLM&#25512;&#29702;&#12290;
&lt;/p&gt;
&lt;p&gt;
Transformer based Large Language Models (LLMs) have been widely used in many fields, and the efficiency of LLM inference becomes hot topic in real applications. However, LLMs are usually complicatedly designed in model structure with massive operations and perform inference in the auto-regressive mode, making it a challenging task to design a system with high efficiency.  In this paper, we propose an efficient LLM inference solution with low latency and high throughput. Firstly, we simplify the LLM decoder layer by fusing data movement and element-wise operations to reduce the memory access frequency and lower system latency. We also propose a segment KV cache policy to keep key/value of the request and response tokens in separate physical memory for effective device memory management, helping enlarge the runtime batch size and improve system throughput. A customized Scaled-Dot-Product-Attention kernel is designed to match our fusion policy based on the segment KV cache solution. We im
&lt;/p&gt;</description></item></channel></rss>