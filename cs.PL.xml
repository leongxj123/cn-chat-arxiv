<rss version="2.0"><channel><title>Chat Arxiv cs.PL</title><link>https://github.com/qhduan/cn-chat-arxiv</link><description>This is arxiv RSS feed for cs.PL</description><item><title>&#36825;&#20010;&#30740;&#31350;&#25552;&#20986;&#20102;&#19968;&#20010;&#30001;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;&#39537;&#21160;&#30340;&#25968;&#25454;&#27969;&#20998;&#26512;&#26694;&#26550;&#65292;&#21487;&#20197;&#20998;&#26512;&#20219;&#24847;&#20195;&#30721;&#29255;&#27573;&#65292;&#26080;&#38656;&#32534;&#35793;&#22522;&#30784;&#35774;&#26045;&#65292;&#24182;&#33258;&#21160;&#21512;&#25104;&#19979;&#28216;&#24212;&#29992;&#65292;&#26377;&#25928;&#35299;&#20915;&#25968;&#25454;&#27969;&#30456;&#20851;&#28431;&#27934;&#26816;&#27979;&#38382;&#39064;</title><link>https://arxiv.org/abs/2402.10754</link><description>&lt;p&gt;
&#24403;&#25968;&#25454;&#27969;&#20998;&#26512;&#36935;&#19978;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;
&lt;/p&gt;
&lt;p&gt;
When Dataflow Analysis Meets Large Language Models
&lt;/p&gt;
&lt;p&gt;
https://arxiv.org/abs/2402.10754
&lt;/p&gt;
&lt;p&gt;
&#36825;&#20010;&#30740;&#31350;&#25552;&#20986;&#20102;&#19968;&#20010;&#30001;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;&#39537;&#21160;&#30340;&#25968;&#25454;&#27969;&#20998;&#26512;&#26694;&#26550;&#65292;&#21487;&#20197;&#20998;&#26512;&#20219;&#24847;&#20195;&#30721;&#29255;&#27573;&#65292;&#26080;&#38656;&#32534;&#35793;&#22522;&#30784;&#35774;&#26045;&#65292;&#24182;&#33258;&#21160;&#21512;&#25104;&#19979;&#28216;&#24212;&#29992;&#65292;&#26377;&#25928;&#35299;&#20915;&#25968;&#25454;&#27969;&#30456;&#20851;&#28431;&#27934;&#26816;&#27979;&#38382;&#39064;
&lt;/p&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;p&gt;
&#25968;&#25454;&#27969;&#20998;&#26512;&#26159;&#19968;&#31181;&#24378;&#22823;&#30340;&#20195;&#30721;&#20998;&#26512;&#25216;&#26415;&#65292;&#21487;&#20197;&#25512;&#26029;&#31243;&#24207;&#20540;&#20043;&#38388;&#30340;&#20381;&#36182;&#20851;&#31995;&#65292;&#25903;&#25345;&#20195;&#30721;&#20248;&#21270;&#12289;&#31243;&#24207;&#29702;&#35299;&#21644;&#38169;&#35823;&#26816;&#27979;&#12290;&#26412;&#25991;&#20171;&#32461;&#20102;LLMDFA&#65292;&#36825;&#26159;&#19968;&#20010;&#30001;LLM&#39537;&#21160;&#30340;&#25968;&#25454;&#27969;&#20998;&#26512;&#26694;&#26550;&#65292;&#21487;&#20197;&#20998;&#26512;&#20219;&#24847;&#20195;&#30721;&#29255;&#27573;&#65292;&#26080;&#38656;&#32534;&#35793;&#22522;&#30784;&#35774;&#26045;&#65292;&#24182;&#33258;&#21160;&#21512;&#25104;&#19979;&#28216;&#24212;&#29992;&#12290;LLMDFA&#21463;&#22522;&#20110;&#25688;&#35201;&#30340;&#25968;&#25454;&#27969;&#20998;&#26512;&#21551;&#21457;&#65292;&#23558;&#38382;&#39064;&#20998;&#35299;&#20026;&#19977;&#20010;&#23376;&#38382;&#39064;&#65292;&#24182;&#36890;&#36807;&#20960;&#31181;&#20851;&#38190;&#31574;&#30053;&#26377;&#25928;&#35299;&#20915;&#65292;&#21253;&#25324;&#23569;&#26679;&#26412;&#38142;&#24335;&#24605;&#32500;&#25552;&#31034;&#21644;&#24037;&#20855;&#21512;&#25104;&#12290;&#25105;&#20204;&#30340;&#35780;&#20272;&#34920;&#26126;&#65292;&#35813;&#35774;&#35745;&#21487;&#20197;&#20943;&#36731;&#24187;&#35273;&#24182;&#25552;&#39640;&#25512;&#29702;&#33021;&#21147;&#65292;&#22312;&#26816;&#27979;&#22522;&#20934;&#27979;&#35797;&#20013;&#33719;&#21462;&#39640;&#31934;&#24230;&#21644;&#21484;&#22238;&#29575;
&lt;/p&gt;
&lt;p&gt;
arXiv:2402.10754v1 Announce Type: cross  Abstract: Dataflow analysis is a powerful code analysis technique that reasons dependencies between program values, offering support for code optimization, program comprehension, and bug detection. Existing approaches require the successful compilation of the subject program and customizations for downstream applications. This paper introduces LLMDFA, an LLM-powered dataflow analysis framework that analyzes arbitrary code snippets without requiring a compilation infrastructure and automatically synthesizes downstream applications. Inspired by summary-based dataflow analysis, LLMDFA decomposes the problem into three sub-problems, which are effectively resolved by several essential strategies, including few-shot chain-of-thought prompting and tool synthesis. Our evaluation has shown that the design can mitigate the hallucination and improve the reasoning ability, obtaining high precision and recall in detecting dataflow-related bugs upon benchmark
&lt;/p&gt;</description></item><item><title>PartIR&#26159;&#19968;&#31181;&#29992;&#20110;&#26426;&#22120;&#23398;&#20064;&#30340;&#20998;&#21306;&#31995;&#32479;&#65292;&#20855;&#22791;&#34920;&#36798;&#21147;&#24378;&#21644;&#21487;&#39044;&#27979;&#24615;&#24378;&#30340;&#29305;&#28857;&#12290;&#23427;&#36890;&#36807;&#39640;&#32423;&#31243;&#24207;&#21592;&#21457;&#20986;&#30340;&#20998;&#21306;&#31574;&#30053;&#39537;&#21160;&#65292;&#24182;&#37319;&#29992;&#22686;&#37327;&#37325;&#20889;&#26041;&#27861;&#65292;&#33021;&#22815;&#32452;&#21512;&#19981;&#21516;&#30340;&#20998;&#29255;&#31574;&#30053;&#65292;&#35780;&#20272;&#32467;&#26524;&#34920;&#26126;&#20854;&#21487;&#39044;&#27979;&#24615;&#12289;&#34920;&#36798;&#33021;&#21147;&#21644;&#36798;&#21040;&#23792;&#20540;&#24615;&#33021;&#33021;&#21147;&#24378;&#12290;</title><link>http://arxiv.org/abs/2401.11202</link><description>&lt;p&gt;
PartIR: &#20026;&#26426;&#22120;&#23398;&#20064;&#32452;&#21512;SPMD&#20998;&#21306;&#31574;&#30053;
&lt;/p&gt;
&lt;p&gt;
PartIR: Composing SPMD Partitioning Strategies for Machine Learning. (arXiv:2401.11202v1 [cs.LG])
&lt;/p&gt;
&lt;p&gt;
http://arxiv.org/abs/2401.11202
&lt;/p&gt;
&lt;p&gt;
PartIR&#26159;&#19968;&#31181;&#29992;&#20110;&#26426;&#22120;&#23398;&#20064;&#30340;&#20998;&#21306;&#31995;&#32479;&#65292;&#20855;&#22791;&#34920;&#36798;&#21147;&#24378;&#21644;&#21487;&#39044;&#27979;&#24615;&#24378;&#30340;&#29305;&#28857;&#12290;&#23427;&#36890;&#36807;&#39640;&#32423;&#31243;&#24207;&#21592;&#21457;&#20986;&#30340;&#20998;&#21306;&#31574;&#30053;&#39537;&#21160;&#65292;&#24182;&#37319;&#29992;&#22686;&#37327;&#37325;&#20889;&#26041;&#27861;&#65292;&#33021;&#22815;&#32452;&#21512;&#19981;&#21516;&#30340;&#20998;&#29255;&#31574;&#30053;&#65292;&#35780;&#20272;&#32467;&#26524;&#34920;&#26126;&#20854;&#21487;&#39044;&#27979;&#24615;&#12289;&#34920;&#36798;&#33021;&#21147;&#21644;&#36798;&#21040;&#23792;&#20540;&#24615;&#33021;&#33021;&#21147;&#24378;&#12290;
&lt;/p&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;p&gt;
&#29616;&#20195;&#22823;&#35268;&#27169;&#31070;&#32463;&#32593;&#32476;&#65288;NN&#65289;&#30340;&#35757;&#32451;&#38656;&#35201;&#32467;&#21512;&#25968;&#25454;&#12289;&#27169;&#22411;&#25110;&#20248;&#21270;&#22120;&#20998;&#29255;&#30340;&#24182;&#34892;&#21270;&#31574;&#30053;&#12290;&#24403;&#31574;&#30053;&#21464;&#24471;&#22797;&#26434;&#26102;&#65292;&#20998;&#21306;&#24037;&#20855;&#38656;&#35201;&#20855;&#22791;&#20197;&#19979;&#29305;&#28857;&#65306;1&#65289;&#34920;&#36798;&#21147;&#24378;&#65292;&#20801;&#35768;&#32452;&#21512;&#31616;&#21333;&#31574;&#30053;&#65307;2&#65289;&#21487;&#39044;&#27979;&#24615;&#24378;&#65292;&#21487;&#20197;&#36890;&#36807;&#20998;&#26512;&#20272;&#31639;&#24615;&#33021;&#12290;&#25105;&#20204;&#25552;&#20986;&#20102;PartIR&#65292;&#19968;&#31181;&#29992;&#20110;NN&#20998;&#21306;&#30340;&#35774;&#35745;&#12290;PartIR&#37319;&#29992;&#22686;&#37327;&#37325;&#20889;&#26041;&#27861;&#65292;&#19982;&#30828;&#20214;&#21644;&#36816;&#34892;&#26102;&#26080;&#20851;&#12290;&#25105;&#20204;&#25552;&#20379;&#20102;&#19968;&#20010;&#31616;&#21333;&#32780;&#24378;&#22823;&#30340;API&#29992;&#20110;&#32452;&#21512;&#20998;&#29255;&#31574;&#30053;&#65292;&#24182;&#25552;&#20379;&#20102;&#19968;&#20010;&#27169;&#25311;&#22120;&#36827;&#34892;&#39564;&#35777;&#12290;&#25972;&#20010;&#36807;&#31243;&#30001;&#39640;&#32423;&#31243;&#24207;&#21592;&#21457;&#20986;&#30340;&#20998;&#21306;&#31574;&#30053;&#39537;&#21160;&#65292;&#26082;&#21487;&#20197;&#25163;&#21160;&#20063;&#21487;&#20197;&#33258;&#21160;&#12290;&#37325;&#35201;&#30340;&#26159;&#65292;&#36825;&#20123;&#31574;&#30053;&#19982;&#27169;&#22411;&#20195;&#30721;&#20998;&#24320;&#25351;&#23450;&#65292;&#26131;&#20110;&#26356;&#25913;&#12290;&#25105;&#20204;&#36890;&#36807;&#23545;&#20960;&#31181;&#19981;&#21516;&#27169;&#22411;&#30340;&#35780;&#20272;&#26469;&#23637;&#31034;PartIR&#30340;&#21487;&#39044;&#27979;&#24615;&#12289;&#34920;&#36798;&#33021;&#21147;&#21644;&#36798;&#21040;&#23792;&#20540;&#24615;&#33021;&#30340;&#33021;&#21147;&#12290;
&lt;/p&gt;
&lt;p&gt;
Training of modern large neural networks (NN) requires a combination of parallelization strategies encompassing data, model, or optimizer sharding. When strategies increase in complexity, it becomes necessary for partitioning tools to be 1) expressive, allowing the composition of simpler strategies, and 2) predictable to estimate performance analytically. We present PartIR, our design for a NN partitioning system. PartIR is focused on an incremental approach to rewriting and is hardware-and-runtime agnostic. We present a simple but powerful API for composing sharding strategies and a simulator to validate them. The process is driven by high-level programmer-issued partitioning tactics, which can be both manual and automatic. Importantly, the tactics are specified separately from the model code, making them easy to change. We evaluate PartIR on several different models to demonstrate its predictability, expressibility, and ability to reach peak performance..
&lt;/p&gt;</description></item><item><title>&#25105;&#20204;&#25552;&#20986;&#20102;&#19968;&#31181;&#21033;&#29992;&#39640;&#32423;&#32508;&#21512;&#21644;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;&#29983;&#25104;&#30828;&#20214;&#35774;&#35745;&#30340;&#26041;&#27861;&#65292;&#36890;&#36807;&#26696;&#20363;&#30740;&#31350;&#39564;&#35777;&#20102;&#20854;&#21151;&#33021;&#21644;&#36136;&#37327;&#65292;&#24182;&#35760;&#24405;&#20102;&#25152;&#26377;&#30456;&#20851;&#30340;&#24037;&#20855;&#21644;&#32467;&#26524;&#12290;&#25105;&#20204;&#30456;&#20449;&#36825;&#19968;&#26041;&#27861;&#23558;&#22312;&#24212;&#29992;&#29305;&#23450;&#38598;&#25104;&#30005;&#36335;&#35774;&#35745;&#20013;&#20135;&#29983;&#38761;&#21629;&#24615;&#24433;&#21709;&#12290;</title><link>http://arxiv.org/abs/2311.03489</link><description>&lt;p&gt;
&#21033;&#29992;&#39640;&#32423;&#32508;&#21512;&#21644;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;&#29983;&#25104;&#12289;&#27169;&#25311;&#21644;&#37096;&#32626;&#32479;&#19968;&#38543;&#26426;&#25968;&#29983;&#25104;&#22120;&#30828;&#20214;&#35774;&#35745;
&lt;/p&gt;
&lt;p&gt;
Leveraging High-Level Synthesis and Large Language Models to Generate, Simulate, and Deploy a Uniform Random Number Generator Hardware Design. (arXiv:2311.03489v4 [cs.AR] UPDATED)
&lt;/p&gt;
&lt;p&gt;
http://arxiv.org/abs/2311.03489
&lt;/p&gt;
&lt;p&gt;
&#25105;&#20204;&#25552;&#20986;&#20102;&#19968;&#31181;&#21033;&#29992;&#39640;&#32423;&#32508;&#21512;&#21644;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;&#29983;&#25104;&#30828;&#20214;&#35774;&#35745;&#30340;&#26041;&#27861;&#65292;&#36890;&#36807;&#26696;&#20363;&#30740;&#31350;&#39564;&#35777;&#20102;&#20854;&#21151;&#33021;&#21644;&#36136;&#37327;&#65292;&#24182;&#35760;&#24405;&#20102;&#25152;&#26377;&#30456;&#20851;&#30340;&#24037;&#20855;&#21644;&#32467;&#26524;&#12290;&#25105;&#20204;&#30456;&#20449;&#36825;&#19968;&#26041;&#27861;&#23558;&#22312;&#24212;&#29992;&#29305;&#23450;&#38598;&#25104;&#30005;&#36335;&#35774;&#35745;&#20013;&#20135;&#29983;&#38761;&#21629;&#24615;&#24433;&#21709;&#12290;
&lt;/p&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;p&gt;
&#25105;&#20204;&#25552;&#20986;&#20102;&#19968;&#31181;&#26032;&#30340;&#39640;&#32423;&#32508;&#21512;&#26041;&#27861;&#65292;&#21033;&#29992;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;&#24037;&#20855;&#26469;&#29983;&#25104;&#30828;&#20214;&#35774;&#35745;&#12290;&#35813;&#26041;&#27861;&#20165;&#20351;&#29992;&#24320;&#28304;&#24037;&#20855;&#65292;&#19981;&#21253;&#25324;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;&#12290;&#25105;&#20204;&#20197;&#29983;&#25104;&#20855;&#26377;wishbone&#25509;&#21475;&#30340;&#32622;&#25442;&#21516;&#20313;&#38543;&#26426;&#25968;&#29983;&#25104;&#22120;&#35774;&#35745;&#20026;&#26696;&#20363;&#30740;&#31350;&#12290;&#25105;&#20204;&#20351;&#29992;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;&#29983;&#25104;&#30340;&#20223;&#30495;&#21644;Dieharder&#38543;&#26426;&#24615;&#27979;&#35797;&#22871;&#20214;&#39564;&#35777;&#20102;&#38543;&#26426;&#25968;&#29983;&#25104;&#22120;&#35774;&#35745;&#30340;&#21151;&#33021;&#21644;&#36136;&#37327;&#12290;&#25105;&#20204;&#35760;&#24405;&#20102;&#26696;&#20363;&#30740;&#31350;&#20013;&#20351;&#29992;&#30340;&#25152;&#26377;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;&#32842;&#22825;&#35760;&#24405;&#12289;Python&#33050;&#26412;&#12289;Verilog&#33050;&#26412;&#21644;&#20223;&#30495;&#32467;&#26524;&#12290;&#25105;&#20204;&#30456;&#20449;&#65292;&#25105;&#20204;&#30340;&#30828;&#20214;&#35774;&#35745;&#29983;&#25104;&#26041;&#27861;&#19982;&#24320;&#28304;&#30789;130&#32435;&#31859;&#35774;&#35745;&#24037;&#20855;&#30456;&#32467;&#21512;&#65292;&#23558;&#25913;&#21464;&#24212;&#29992;&#29305;&#23450;&#38598;&#25104;&#30005;&#36335;&#35774;&#35745;&#30340;&#26041;&#24335;&#12290;&#25105;&#20204;&#30340;&#26041;&#27861;&#22312;&#26500;&#24314;&#29289;&#32852;&#32593;&#30340;&#39046;&#22495;&#19987;&#29992;&#35745;&#31639;&#21152;&#36895;&#22120;&#21644;&#27010;&#24565;&#39564;&#35777;&#21407;&#22411;&#26102;&#26174;&#33879;&#38477;&#20302;&#20102;&#38376;&#27099;&#12290;
&lt;/p&gt;
&lt;p&gt;
We present a new high-level synthesis methodology for using large language model tools to generate hardware designs. The methodology uses exclusively open-source tools excluding the large language model. As a case study, we use our methodology to generate a permuted congruential random number generator design with a wishbone interface. We verify the functionality and quality of the random number generator design using large language model-generated simulations and the Dieharder randomness test suite. We document all the large language model chat logs, Python scripts, Verilog scripts, and simulation results used in the case study. We believe that our method of hardware design generation coupled with the open source silicon 130 nm design tools will revolutionize application-specific integrated circuit design. Our methodology significantly lowers the bar to entry when building domain-specific computing accelerators for the Internet of Things and proof of concept prototypes for later fabri
&lt;/p&gt;</description></item></channel></rss>