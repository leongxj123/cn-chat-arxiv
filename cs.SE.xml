<rss version="2.0"><channel><title>Chat Arxiv cs.SE</title><link>https://github.com/qhduan/cn-chat-arxiv</link><description>This is arxiv RSS feed for cs.SE</description><item><title>&#26412;&#30740;&#31350;&#25552;&#20986;&#20102;&#19968;&#20010;&#23436;&#20840;&#33258;&#21160;&#21270;&#30340;&#27979;&#35797;&#26694;&#26550;&#65292;&#21033;&#29992;&#24320;&#21457;&#20154;&#21592;&#32534;&#20889;&#30340;&#27979;&#35797;&#21644;&#21487;&#29992;&#30340;&#20195;&#30721;&#27169;&#22411;&#29983;&#25104;&#21487;&#32534;&#35793;&#12289;&#26131;&#35835;&#30340;&#21333;&#20803;&#27979;&#35797;&#12290;</title><link>http://arxiv.org/abs/2308.08033</link><description>&lt;p&gt;
&#20351;&#29992;&#20195;&#30721;&#27169;&#22411;&#21644;&#39046;&#22495;&#36866;&#24212;&#24615;&#30340;&#33258;&#21160;&#21270;&#27979;&#35797;&#29992;&#20363;&#29983;&#25104;
&lt;/p&gt;
&lt;p&gt;
Automated Test Case Generation Using Code Models and Domain Adaptation. (arXiv:2308.08033v1 [cs.SE])
&lt;/p&gt;
&lt;p&gt;
http://arxiv.org/abs/2308.08033
&lt;/p&gt;
&lt;p&gt;
&#26412;&#30740;&#31350;&#25552;&#20986;&#20102;&#19968;&#20010;&#23436;&#20840;&#33258;&#21160;&#21270;&#30340;&#27979;&#35797;&#26694;&#26550;&#65292;&#21033;&#29992;&#24320;&#21457;&#20154;&#21592;&#32534;&#20889;&#30340;&#27979;&#35797;&#21644;&#21487;&#29992;&#30340;&#20195;&#30721;&#27169;&#22411;&#29983;&#25104;&#21487;&#32534;&#35793;&#12289;&#26131;&#35835;&#30340;&#21333;&#20803;&#27979;&#35797;&#12290;
&lt;/p&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;p&gt;
&#26368;&#20808;&#36827;&#30340;&#33258;&#21160;&#21270;&#27979;&#35797;&#29983;&#25104;&#25216;&#26415;&#65292;&#20363;&#22914;&#22522;&#20110;&#25628;&#32034;&#30340;&#27979;&#35797;&#65292;&#36890;&#24120;&#23545;&#24320;&#21457;&#20154;&#21592;&#21019;&#24314;&#30340;&#27979;&#35797;&#29992;&#20363;&#19968;&#26080;&#25152;&#30693;&#12290;&#22240;&#27492;&#65292;&#23427;&#20204;&#36890;&#24120;&#29983;&#25104;&#30340;&#27979;&#35797;&#29992;&#20363;&#19981;&#26131;&#38405;&#35835;&#65292;&#24182;&#19988;&#21487;&#33021;&#26080;&#27861;&#26816;&#27979;&#25152;&#26377;&#22797;&#26434;&#32570;&#38519;&#65292;&#32780;&#24320;&#21457;&#20154;&#21592;&#32534;&#20889;&#30340;&#27979;&#35797;&#29992;&#20363;&#21017;&#21487;&#20197;&#12290;&#22312;&#36825;&#39033;&#30740;&#31350;&#20013;&#65292;&#25105;&#20204;&#21033;&#29992;&#22522;&#20110;Transformer&#30340;&#20195;&#30721;&#27169;&#22411;&#29983;&#25104;&#21487;&#20197;&#34917;&#20805;&#22522;&#20110;&#25628;&#32034;&#27979;&#35797;&#29983;&#25104;&#30340;&#21333;&#20803;&#27979;&#35797;&#12290;&#20855;&#20307;&#32780;&#35328;&#65292;&#25105;&#20204;&#20351;&#29992;CodeT5&#65292;&#21363;&#26368;&#20808;&#36827;&#30340;&#22823;&#22411;&#20195;&#30721;&#27169;&#22411;&#65292;&#24182;&#23545;&#27979;&#35797;&#29983;&#25104;&#19979;&#28216;&#20219;&#21153;&#36827;&#34892;&#24494;&#35843;&#12290;&#25105;&#20204;&#20351;&#29992;Methods2test&#25968;&#25454;&#38598;&#23545;CodeT5&#36827;&#34892;&#24494;&#35843;&#65292;&#24182;&#20351;&#29992;Defects4j&#36827;&#34892;&#39033;&#30446;&#32423;&#39046;&#22495;&#36866;&#24212;&#24615;&#21644;&#35780;&#20272;&#12290;&#26412;&#30740;&#31350;&#30340;&#20027;&#35201;&#36129;&#29486;&#26159;&#25552;&#20986;&#20102;&#19968;&#20010;&#23436;&#20840;&#33258;&#21160;&#21270;&#30340;&#27979;&#35797;&#26694;&#26550;&#65292;&#21033;&#29992;&#24320;&#21457;&#20154;&#21592;&#32534;&#20889;&#30340;&#27979;&#35797;&#21644;&#21487;&#29992;&#30340;&#20195;&#30721;&#27169;&#22411;&#29983;&#25104;&#21487;&#32534;&#35793;&#12289;&#26131;&#35835;&#30340;&#21333;&#20803;&#27979;&#35797;&#12290;&#32467;&#26524;&#26174;&#31034;&#65292;&#25105;&#20204;&#30340;&#26041;&#27861;&#21487;&#20197;&#29983;&#25104;&#26032;&#30340;&#27979;&#35797;&#29992;&#20363;&#65292;&#35206;&#30422;&#20102;&#24050;&#32463;&#34987;&#27979;&#35797;&#36807;&#30340;&#20195;&#30721;&#34892;&#12290;
&lt;/p&gt;
&lt;p&gt;
State-of-the-art automated test generation techniques, such as search-based testing, are usually ignorant about what a developer would create as a test case. Therefore, they typically create tests that are not human-readable and may not necessarily detect all types of complex bugs developer-written tests would do. In this study, we leverage Transformer-based code models to generate unit tests that can complement search-based test generation. Specifically, we use CodeT5, i.e., a state-of-the-art large code model, and fine-tune it on the test generation downstream task. For our analysis, we use the Methods2test dataset for fine-tuning CodeT5 and Defects4j for project-level domain adaptation and evaluation. The main contribution of this study is proposing a fully automated testing framework that leverages developer-written tests and available code models to generate compilable, human-readable unit tests. Results show that our approach can generate new test cases that cover lines that were
&lt;/p&gt;</description></item><item><title>RAPGen&#26159;&#19968;&#31181;&#26032;&#26041;&#27861;&#65292;&#36890;&#36807;&#22312;&#38646;&#26679;&#26412;&#24773;&#20917;&#19979;&#20351;&#29992;Retrieval-Augmented Prompt Generation&#65288;RAPGen&#65289;&#26041;&#27861;&#65292;&#21363;&#20174;&#39044;&#20808;&#26500;&#24314;&#30340;&#24615;&#33021;Bug&#20462;&#22797;&#30693;&#35782;&#24211;&#20013;&#26816;&#32034;&#25552;&#31034;&#25351;&#20196;&#24182;&#29983;&#25104;&#25552;&#31034;&#65292;&#28982;&#21518;&#22312;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;&#19978;&#29983;&#25104;&#20462;&#22797;&#26041;&#26696;&#65292;&#21487;&#20197;&#26377;&#25928;&#22320;&#35299;&#20915;&#20195;&#30721;&#20302;&#25928;&#38382;&#39064;&#12290;&#23454;&#39564;&#32467;&#26524;&#26174;&#31034;&#65292;&#22312;&#19987;&#23478;&#39564;&#35777;&#30340;&#25968;&#25454;&#38598;&#20013;&#65292;RAPGen&#22312;60%&#30340;&#24773;&#20917;&#19979;&#21487;&#20197;&#29983;&#25104;&#19982;&#24320;&#21457;&#32773;&#31561;&#25928;&#25110;&#26356;&#22909;&#30340;&#24615;&#33021;&#25913;&#36827;&#24314;&#35758;&#65292;&#20854;&#20013;&#32422;39%&#30340;&#24314;&#35758;&#23436;&#20840;&#30456;&#21516;&#12290;</title><link>http://arxiv.org/abs/2306.17077</link><description>&lt;p&gt;
RAPGen: &#19968;&#31181;&#35299;&#20915;&#38646;&#26679;&#26412;&#20195;&#30721;&#20302;&#25928;&#38382;&#39064;&#30340;&#26041;&#27861;
&lt;/p&gt;
&lt;p&gt;
RAPGen: An Approach for Fixing Code Inefficiencies in Zero-Shot. (arXiv:2306.17077v1 [cs.SE])
&lt;/p&gt;
&lt;p&gt;
http://arxiv.org/abs/2306.17077
&lt;/p&gt;
&lt;p&gt;
RAPGen&#26159;&#19968;&#31181;&#26032;&#26041;&#27861;&#65292;&#36890;&#36807;&#22312;&#38646;&#26679;&#26412;&#24773;&#20917;&#19979;&#20351;&#29992;Retrieval-Augmented Prompt Generation&#65288;RAPGen&#65289;&#26041;&#27861;&#65292;&#21363;&#20174;&#39044;&#20808;&#26500;&#24314;&#30340;&#24615;&#33021;Bug&#20462;&#22797;&#30693;&#35782;&#24211;&#20013;&#26816;&#32034;&#25552;&#31034;&#25351;&#20196;&#24182;&#29983;&#25104;&#25552;&#31034;&#65292;&#28982;&#21518;&#22312;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;&#19978;&#29983;&#25104;&#20462;&#22797;&#26041;&#26696;&#65292;&#21487;&#20197;&#26377;&#25928;&#22320;&#35299;&#20915;&#20195;&#30721;&#20302;&#25928;&#38382;&#39064;&#12290;&#23454;&#39564;&#32467;&#26524;&#26174;&#31034;&#65292;&#22312;&#19987;&#23478;&#39564;&#35777;&#30340;&#25968;&#25454;&#38598;&#20013;&#65292;RAPGen&#22312;60%&#30340;&#24773;&#20917;&#19979;&#21487;&#20197;&#29983;&#25104;&#19982;&#24320;&#21457;&#32773;&#31561;&#25928;&#25110;&#26356;&#22909;&#30340;&#24615;&#33021;&#25913;&#36827;&#24314;&#35758;&#65292;&#20854;&#20013;&#32422;39%&#30340;&#24314;&#35758;&#23436;&#20840;&#30456;&#21516;&#12290;
&lt;/p&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;p&gt;
&#24615;&#33021;Bug&#26159;&#19968;&#31181;&#21363;&#20351;&#22312;&#32463;&#36807;&#20805;&#20998;&#27979;&#35797;&#30340;&#21830;&#19994;&#20135;&#21697;&#20013;&#20063;&#21487;&#33021;&#20986;&#29616;&#30340;&#38750;&#21151;&#33021;&#24615;&#38382;&#39064;&#12290;&#20462;&#22797;&#36825;&#20123;&#24615;&#33021;Bug&#26159;&#19968;&#20010;&#37325;&#35201;&#20294;&#20855;&#26377;&#25361;&#25112;&#24615;&#30340;&#38382;&#39064;&#12290;&#22312;&#36825;&#39033;&#24037;&#20316;&#20013;&#65292;&#25105;&#20204;&#35299;&#20915;&#20102;&#36825;&#20010;&#25361;&#25112;&#65292;&#24182;&#25552;&#20986;&#20102;&#19968;&#31181;&#21517;&#20026;Retrieval-Augmented Prompt Generation&#65288;RAPGen&#65289;&#30340;&#26032;&#26041;&#27861;&#12290;&#32473;&#23450;&#19968;&#20010;&#23384;&#22312;&#24615;&#33021;&#38382;&#39064;&#30340;&#20195;&#30721;&#29255;&#27573;&#65292;RAPGen&#39318;&#20808;&#20174;&#39044;&#20808;&#26500;&#24314;&#30340;&#20043;&#21069;&#24615;&#33021;Bug&#20462;&#22797;&#30693;&#35782;&#24211;&#20013;&#26816;&#32034;&#19968;&#20010;&#25552;&#31034;&#25351;&#20196;&#65292;&#28982;&#21518;&#20351;&#29992;&#26816;&#32034;&#21040;&#30340;&#25351;&#20196;&#29983;&#25104;&#19968;&#20010;&#25552;&#31034;&#12290;&#28982;&#21518;&#65292;&#23427;&#22312;&#38646;&#26679;&#26412;&#24773;&#20917;&#19979;&#20351;&#29992;&#36825;&#20010;&#25552;&#31034;&#22312;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;&#65288;&#22914;Codex&#65289;&#19978;&#29983;&#25104;&#19968;&#20010;&#20462;&#22797;&#26041;&#26696;&#12290;&#25105;&#20204;&#23558;&#25105;&#20204;&#30340;&#26041;&#27861;&#19982;&#21508;&#31181;&#25552;&#31034;&#21464;&#20307;&#21644;&#29616;&#26377;&#26041;&#27861;&#22312;&#24615;&#33021;Bug&#20462;&#22797;&#20219;&#21153;&#20013;&#36827;&#34892;&#20102;&#27604;&#36739;&#12290;&#25105;&#20204;&#30340;&#35780;&#20272;&#32467;&#26524;&#26174;&#31034;&#65292;RAPGen&#22312;60%&#30340;&#24773;&#20917;&#19979;&#21487;&#20197;&#29983;&#25104;&#19982;&#24320;&#21457;&#32773;&#31561;&#25928;&#25110;&#26356;&#22909;&#30340;&#24615;&#33021;&#25913;&#36827;&#24314;&#35758;&#65292;&#22312;&#32463;&#36807;&#19987;&#23478;&#39564;&#35777;&#30340;&#36807;&#21435;C#&#24320;&#21457;&#32773;&#25152;&#20570;&#30340;&#24615;&#33021;&#26356;&#25913;&#25968;&#25454;&#38598;&#20013;&#26377;&#32422;39%&#30340;&#24314;&#35758;&#23436;&#20840;&#30456;&#21516;&#12290;
&lt;/p&gt;
&lt;p&gt;
Performance bugs are non-functional bugs that can even manifest in well-tested commercial products. Fixing these performance bugs is an important yet challenging problem. In this work, we address this challenge and present a new approach called Retrieval-Augmented Prompt Generation (RAPGen). Given a code snippet with a performance issue, RAPGen first retrieves a prompt instruction from a pre-constructed knowledge-base of previous performance bug fixes and then generates a prompt using the retrieved instruction. It then uses this prompt on a Large Language Model (such as Codex) in zero-shot to generate a fix. We compare our approach with the various prompt variations and state of the art methods in the task of performance bug fixing. Our evaluation shows that RAPGen can generate performance improvement suggestions equivalent or better than a developer in ~60% of the cases, getting ~39% of them verbatim, in an expert-verified dataset of past performance changes made by C# developers.
&lt;/p&gt;</description></item></channel></rss>