<rss version="2.0"><channel><title>Chat Arxiv cs.SE</title><link>https://github.com/qhduan/cn-chat-arxiv</link><description>This is arxiv RSS feed for cs.SE</description><item><title>&#26412;&#25991;&#20171;&#32461;&#20102;Fuzz4All&#65292;&#36825;&#26159;&#31532;&#19968;&#20010;&#33021;&#22815;&#38024;&#23545;&#35768;&#22810;&#19981;&#21516;&#30340;&#36755;&#20837;&#35821;&#35328;&#21644;&#36825;&#20123;&#35821;&#35328;&#30340;&#35768;&#22810;&#19981;&#21516;&#21151;&#33021;&#36827;&#34892;&#27169;&#31946;&#27979;&#35797;&#30340;&#36890;&#29992;&#24037;&#20855;&#12290;</title><link>http://arxiv.org/abs/2308.04748</link><description>&lt;p&gt;
&#36890;&#36807;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;&#23454;&#29616;&#36890;&#29992;&#27169;&#31946;&#27979;&#35797;
&lt;/p&gt;
&lt;p&gt;
Universal Fuzzing via Large Language Models. (arXiv:2308.04748v1 [cs.SE])
&lt;/p&gt;
&lt;p&gt;
http://arxiv.org/abs/2308.04748
&lt;/p&gt;
&lt;p&gt;
&#26412;&#25991;&#20171;&#32461;&#20102;Fuzz4All&#65292;&#36825;&#26159;&#31532;&#19968;&#20010;&#33021;&#22815;&#38024;&#23545;&#35768;&#22810;&#19981;&#21516;&#30340;&#36755;&#20837;&#35821;&#35328;&#21644;&#36825;&#20123;&#35821;&#35328;&#30340;&#35768;&#22810;&#19981;&#21516;&#21151;&#33021;&#36827;&#34892;&#27169;&#31946;&#27979;&#35797;&#30340;&#36890;&#29992;&#24037;&#20855;&#12290;
&lt;/p&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;p&gt;
&#27169;&#31946;&#27979;&#35797;&#22312;&#21457;&#29616;&#21508;&#31181;&#36719;&#20214;&#31995;&#32479;&#20013;&#30340;&#28431;&#27934;&#21644;&#33030;&#24369;&#24615;&#26041;&#38754;&#21462;&#24471;&#20102;&#24040;&#22823;&#25104;&#21151;&#12290;&#25509;&#21463;&#32534;&#31243;&#25110;&#24418;&#24335;&#35821;&#35328;&#20316;&#20026;&#36755;&#20837;&#30340;&#27979;&#35797;&#31995;&#32479;&#65288;SUTs&#65289;&#65292;&#22914;&#32534;&#35793;&#22120;&#65292;&#36816;&#34892;&#26102;&#24341;&#25806;&#65292;&#32422;&#26463;&#27714;&#35299;&#22120;&#21644;&#20855;&#26377;&#21487;&#35775;&#38382;API&#30340;&#36719;&#20214;&#24211;&#65292;&#23588;&#20854;&#37325;&#35201;&#65292;&#22240;&#20026;&#23427;&#20204;&#26159;&#36719;&#20214;&#24320;&#21457;&#30340;&#22522;&#26412;&#26500;&#24314;&#22359;&#12290;&#28982;&#32780;&#65292;&#38024;&#23545;&#36825;&#20123;&#31995;&#32479;&#30340;&#29616;&#26377;&#27169;&#31946;&#27979;&#35797;&#24037;&#20855;&#36890;&#24120;&#38024;&#23545;&#29305;&#23450;&#35821;&#35328;&#65292;&#22240;&#27492;&#26080;&#27861;&#36731;&#26131;&#24212;&#29992;&#20110;&#20854;&#20182;&#35821;&#35328;&#29978;&#33267;&#21516;&#19968;&#35821;&#35328;&#30340;&#20854;&#20182;&#29256;&#26412;&#12290;&#27492;&#22806;&#65292;&#29616;&#26377;&#27169;&#31946;&#27979;&#35797;&#24037;&#20855;&#29983;&#25104;&#30340;&#36755;&#20837;&#36890;&#24120;&#23616;&#38480;&#20110;&#36755;&#20837;&#35821;&#35328;&#30340;&#29305;&#23450;&#21151;&#33021;&#65292;&#22240;&#27492;&#24456;&#38590;&#25581;&#31034;&#19982;&#20854;&#20182;&#21151;&#33021;&#30456;&#20851;&#30340;&#28431;&#27934;&#25110;&#26032;&#21151;&#33021;&#12290;&#26412;&#25991;&#25552;&#20986;&#20102;Fuzz4All&#65292;&#36825;&#26159;&#31532;&#19968;&#20010;&#36890;&#29992;&#30340;&#27169;&#31946;&#27979;&#35797;&#24037;&#20855;&#65292;&#23427;&#21487;&#20197;&#38024;&#23545;&#35768;&#22810;&#19981;&#21516;&#30340;&#36755;&#20837;&#35821;&#35328;&#21644;&#36825;&#20123;&#35821;&#35328;&#30340;&#35768;&#22810;&#19981;&#21516;&#21151;&#33021;&#36827;&#34892;&#27979;&#35797;&#12290;Fuzz4All&#30340;&#20851;&#38190;&#24605;&#24819;&#26159;&#21033;&#29992;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;&#65288;LLMs&#65289;&#20316;&#20026;&#36755;&#20837;&#29983;&#25104;&#22120;&#12290;
&lt;/p&gt;
&lt;p&gt;
Fuzzing has achieved tremendous success in discovering bugs and vulnerabilities in various software systems. Systems under test (SUTs) that take in programming or formal language as inputs, e.g., compilers, runtime engines, constraint solvers, and software libraries with accessible APIs, are especially important as they are fundamental building blocks of software development. However, existing fuzzers for such systems often target a specific language, and thus cannot be easily applied to other languages or even other versions of the same language. Moreover, the inputs generated by existing fuzzers are often limited to specific features of the input language, and thus can hardly reveal bugs related to other or new features. This paper presents Fuzz4All, the first fuzzer that is universal in the sense that it can target many different input languages and many different features of these languages. The key idea behind Fuzz4All is to leverage large language models (LLMs) as an input genera
&lt;/p&gt;</description></item><item><title>&#25552;&#20986;&#20102;&#19968;&#20010;&#21517;&#20026;ChatRepair&#30340;&#26032;&#22411;&#33258;&#21160;&#31243;&#24207;&#20462;&#22797;&#26041;&#27861;&#65292;&#19982;&#20256;&#32479;&#30340;&#8220;&#29983;&#25104;&#21644;&#39564;&#35777;&#8221;&#33539;&#24335;&#19981;&#21516;&#65292;&#23427;&#33021;&#22815;&#36890;&#36807;&#23545;&#35805;&#39118;&#26684;&#23454;&#29616;&#21363;&#26102;&#21453;&#39304;&#65292;&#20174;&#32780;&#26174;&#30528;&#25552;&#39640;&#28431;&#27934;&#20462;&#22797;&#30340;&#25928;&#29575;&#21644;&#34917;&#19969;&#30340;&#20934;&#30830;&#24615;&#12290;</title><link>http://arxiv.org/abs/2304.00385</link><description>&lt;p&gt;
&#35753;&#23545;&#35805;&#32487;&#32493;&#65306;&#20351;&#29992;ChatGPT&#20165;&#20197;0.42&#32654;&#20803;&#30340;&#20215;&#26684;&#20462;&#22797;&#20102;337&#20010;&#28431;&#27934;&#20013;&#30340;162&#20010;
&lt;/p&gt;
&lt;p&gt;
Keep the Conversation Going: Fixing 162 out of 337 bugs for $0.42 each using ChatGPT. (arXiv:2304.00385v1 [cs.SE])
&lt;/p&gt;
&lt;p&gt;
http://arxiv.org/abs/2304.00385
&lt;/p&gt;
&lt;p&gt;
&#25552;&#20986;&#20102;&#19968;&#20010;&#21517;&#20026;ChatRepair&#30340;&#26032;&#22411;&#33258;&#21160;&#31243;&#24207;&#20462;&#22797;&#26041;&#27861;&#65292;&#19982;&#20256;&#32479;&#30340;&#8220;&#29983;&#25104;&#21644;&#39564;&#35777;&#8221;&#33539;&#24335;&#19981;&#21516;&#65292;&#23427;&#33021;&#22815;&#36890;&#36807;&#23545;&#35805;&#39118;&#26684;&#23454;&#29616;&#21363;&#26102;&#21453;&#39304;&#65292;&#20174;&#32780;&#26174;&#30528;&#25552;&#39640;&#28431;&#27934;&#20462;&#22797;&#30340;&#25928;&#29575;&#21644;&#34917;&#19969;&#30340;&#20934;&#30830;&#24615;&#12290;
&lt;/p&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;p&gt;
&#33258;&#21160;&#31243;&#24207;&#20462;&#22797;&#65288;APR&#65289;&#26088;&#22312;&#33258;&#21160;&#29983;&#25104;&#26377;&#20851;&#26377;&#28431;&#27934;&#31243;&#24207;&#30340;&#20462;&#34917;&#31243;&#24207;&#12290;&#26368;&#36817;&#30340;APR&#24037;&#20316;&#38598;&#20013;&#20110;&#21033;&#29992;&#29616;&#20195;&#30340;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;&#65288;LLMs&#65289;&#30452;&#25509;&#29983;&#25104;APR&#30340;&#34917;&#19969;&#12290;&#36825;&#31181;&#22522;&#20110;LLM&#30340;APR&#24037;&#20855;&#30340;&#24037;&#20316;&#26041;&#27861;&#26159;&#39318;&#20808;&#26500;&#24314;&#19968;&#20010;&#30001;&#21407;&#22987;&#26377;&#28431;&#27934;&#20195;&#30721;&#26500;&#24314;&#30340;&#36755;&#20837;&#25552;&#31034;&#65292;&#28982;&#21518;&#26597;&#35810;LLM&#29983;&#25104;&#34917;&#19969;&#12290;&#34429;&#28982;&#22522;&#20110;LLM&#30340;APR&#24037;&#20855;&#33021;&#22815;&#23454;&#29616;&#26368;&#20808;&#36827;&#30340;&#32467;&#26524;&#65292;&#20294;&#23427;&#20173;&#28982;&#36981;&#24490;&#8220;&#29983;&#25104;&#21644;&#39564;&#35777;&#8221;&#20462;&#22797;&#33539;&#24335;&#65292;&#21363;&#39318;&#20808;&#29983;&#25104;&#22823;&#37327;&#30340;&#34917;&#19969;&#65292;&#28982;&#21518;&#36880;&#20010;&#39564;&#35777;&#27599;&#20010;&#34917;&#19969;&#12290;&#36825;&#19981;&#20165;&#20250;&#23548;&#33268;&#35768;&#22810;&#37325;&#22797;&#30340;&#19981;&#27491;&#30830;&#30340;&#34917;&#19969;&#65292;&#32780;&#19988;&#36824;&#20250;&#38169;&#36807;&#27979;&#35797;&#22833;&#36133;&#20013;&#30340;&#20851;&#38190;&#20449;&#24687;&#20197;&#21450;&#21487;&#34892;&#30340;&#34917;&#19969;&#20449;&#24687;&#12290;&#20026;&#20102;&#35299;&#20915;&#36825;&#20123;&#23616;&#38480;&#24615;&#65292;&#25105;&#20204;&#25552;&#20986;&#20102;ChatRepair&#65292;&#36825;&#26159;&#31532;&#19968;&#31181;&#23436;&#20840;&#33258;&#21160;&#21270;&#30340;&#23545;&#35805;&#39537;&#21160;&#30340;APR&#26041;&#27861;&#65292;&#23427;&#23558;&#34917;&#19969;&#29983;&#25104;&#19982;&#21363;&#26102;&#21453;&#39304;&#20132;&#26367;&#36827;&#34892;&#65292;&#20197;&#20197;&#23545;&#35805;&#39118;&#26684;&#25191;&#34892;APR&#12290;ChatRepair&#39318;&#20808;&#23558;&#30456;&#20851;&#30340;&#27979;&#35797;&#22833;&#36133;&#20449;&#24687;&#39304;&#20837;LLM&#20013;&#65292;&#28982;&#21518;&#22312;&#34917;&#19969;&#29983;&#25104;&#36807;&#31243;&#20013;&#20351;&#29992;&#20132;&#20114;&#24335;&#23545;&#35805;&#65292;&#20197;&#38598;&#20013;&#26041;&#24335;&#29983;&#25104;&#34917;&#19969;&#12290;&#27492;&#22806;&#65292;ChatRepair&#36824;&#21033;&#29992;&#20102;&#27979;&#35797;&#32467;&#26524;&#20013;&#30340;&#20851;&#38190;&#20449;&#24687;&#65292;&#20197;&#29983;&#25104;&#26356;&#22909;&#30340;&#34917;&#19969;&#12290;
&lt;/p&gt;
&lt;p&gt;
Automated Program Repair (APR) aims to automatically generate patches for buggy programs. Recent APR work has been focused on leveraging modern Large Language Models (LLMs) to directly generate patches for APR. Such LLM-based APR tools work by first constructing an input prompt built using the original buggy code and then queries the LLM to generate patches. While the LLM-based APR tools are able to achieve state-of-the-art results, it still follows the classic Generate and Validate repair paradigm of first generating lots of patches and then validating each one afterwards. This not only leads to many repeated patches that are incorrect but also miss the crucial information in test failures as well as in plausible patches.  To address these limitations, we propose ChatRepair, the first fully automated conversation-driven APR approach that interleaves patch generation with instant feedback to perform APR in a conversational style. ChatRepair first feeds the LLM with relevant test failur
&lt;/p&gt;</description></item><item><title>&#26412;&#35770;&#25991;&#37325;&#26032;&#23457;&#35270;&#20102;&#33258;&#21160;&#31243;&#24207;&#20462;&#22797;&#20013;&#30340;&#25972;&#24418;&#25163;&#26415;&#20551;&#35774;&#65292;&#24182;&#25552;&#20986;&#20351;&#29992;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;&#36827;&#34892;APR&#30340;&#26032;&#26041;&#27861;&#65292;&#20027;&#35201;&#35299;&#20915;&#20102;&#20256;&#32479;APR&#24037;&#20855;&#22312;&#19981;&#21516;&#39033;&#30446;&#20013;&#26080;&#27861;&#20135;&#29983;&#22810;&#26679;&#21270;&#20462;&#34917;&#31243;&#24207;&#30340;&#38382;&#39064;&#12290;</title><link>http://arxiv.org/abs/2303.10494</link><description>&lt;p&gt;
&#36890;&#36807;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;&#37325;&#26032;&#23457;&#35270;&#25972;&#24418;&#25163;&#26415;&#20551;&#35774;
&lt;/p&gt;
&lt;p&gt;
Revisiting the Plastic Surgery Hypothesis via Large Language Models. (arXiv:2303.10494v1 [cs.SE])
&lt;/p&gt;
&lt;p&gt;
http://arxiv.org/abs/2303.10494
&lt;/p&gt;
&lt;p&gt;
&#26412;&#35770;&#25991;&#37325;&#26032;&#23457;&#35270;&#20102;&#33258;&#21160;&#31243;&#24207;&#20462;&#22797;&#20013;&#30340;&#25972;&#24418;&#25163;&#26415;&#20551;&#35774;&#65292;&#24182;&#25552;&#20986;&#20351;&#29992;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;&#36827;&#34892;APR&#30340;&#26032;&#26041;&#27861;&#65292;&#20027;&#35201;&#35299;&#20915;&#20102;&#20256;&#32479;APR&#24037;&#20855;&#22312;&#19981;&#21516;&#39033;&#30446;&#20013;&#26080;&#27861;&#20135;&#29983;&#22810;&#26679;&#21270;&#20462;&#34917;&#31243;&#24207;&#30340;&#38382;&#39064;&#12290;
&lt;/p&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;p&gt;
&#33258;&#21160;&#21270;&#31243;&#24207;&#20462;&#22797;&#65288;APR&#65289;&#26088;&#22312;&#33258;&#21160;&#29983;&#25104;&#36755;&#20837;&#38169;&#35823;&#31243;&#24207;&#30340;&#34917;&#19969;&#12290;&#20256;&#32479;APR&#24037;&#20855;&#36890;&#24120;&#19987;&#27880;&#20110;&#29305;&#23450;&#30340;&#38169;&#35823;&#31867;&#22411;&#21644;&#20462;&#22797;&#26041;&#24335;&#65292;&#36890;&#36807;&#20351;&#29992;&#27169;&#26495;&#12289;&#21551;&#21457;&#24335;&#21644;&#27491;&#24335;&#35268;&#33539;&#12290;&#28982;&#32780;&#65292;&#36825;&#20123;&#25216;&#26415;&#22312;&#38169;&#35823;&#31867;&#22411;&#21644;&#20462;&#34917;&#31243;&#24207;&#30340;&#22810;&#26679;&#21270;&#26041;&#38754;&#23384;&#22312;&#38480;&#21046;&#12290;&#22240;&#27492;&#65292;&#30740;&#31350;&#20154;&#21592;&#35774;&#35745;&#20102;&#21508;&#31181;&#22522;&#20110;&#23398;&#20064;&#30340;APR&#24037;&#20855;&#65292;&#26368;&#36817;&#30340;&#24037;&#20316;&#38598;&#20013;&#22312;&#30452;&#25509;&#20351;&#29992;&#22823;&#22411;&#35821;&#35328;&#27169;&#22411;&#65288;LLMs&#65289;&#36827;&#34892;APR&#12290;&#34429;&#28982;&#22522;&#20110;LLM&#30340;APR&#24037;&#20855;&#33021;&#22815;&#22312;&#35768;&#22810;&#20462;&#22797;&#25968;&#25454;&#38598;&#19978;&#23454;&#29616;&#26368;&#20808;&#36827;&#30340;&#24615;&#33021;&#65292;&#20294;&#29992;&#20110;&#30452;&#25509;&#20462;&#22797;&#30340;LLMs&#24182;&#27809;&#26377;&#23436;&#20840;&#20102;&#35299;&#39033;&#30446;&#29305;&#23450;&#20449;&#24687;&#65292;&#22914;&#29420;&#29305;&#30340;&#21464;&#37327;&#25110;&#26041;&#27861;&#21517;&#31216;&#12290;&#25972;&#24418;&#25163;&#26415;&#20551;&#35774;&#26159;APR&#30340;&#19968;&#20010;&#33879;&#21517;&#30340;&#35265;&#35299;&#65292;&#23427;&#25351;&#20986;&#20462;&#22797;&#38169;&#35823;&#30340;&#20195;&#30721;&#37096;&#20998;&#36890;&#24120;&#24050;&#32463;&#23384;&#22312;&#20110;&#21516;&#19968;&#39033;&#30446;&#20013;&#12290;&#20256;&#32479;&#30340;APR&#24037;&#20855;&#20027;&#35201;&#36890;&#36807;&#35774;&#35745;&#25163;&#21160;&#25110;&#22522;&#20110;&#21551;&#21457;&#30340;&#26041;&#27861;&#26469;&#21033;&#29992;&#25972;&#24418;&#25163;&#26415;&#20551;&#35774;&#12290;
&lt;/p&gt;
&lt;p&gt;
Automated Program Repair (APR) aspires to automatically generate patches for an input buggy program. Traditional APR tools typically focus on specific bug types and fixes through the use of templates, heuristics, and formal specifications. However, these techniques are limited in terms of the bug types and patch variety they can produce. As such, researchers have designed various learning-based APR tools with recent work focused on directly using Large Language Models (LLMs) for APR. While LLM-based APR tools are able to achieve state-of-the-art performance on many repair datasets, the LLMs used for direct repair are not fully aware of the project-specific information such as unique variable or method names.  The plastic surgery hypothesis is a well-known insight for APR, which states that the code ingredients to fix the bug usually already exist within the same project. Traditional APR tools have largely leveraged the plastic surgery hypothesis by designing manual or heuristic-based a
&lt;/p&gt;</description></item></channel></rss>