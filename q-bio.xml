<rss version="2.0"><channel><title>Chat Arxiv q-bio</title><link>https://github.com/qhduan/cn-chat-arxiv</link><description>This is arxiv RSS feed for q-bio</description><item><title>TargetCall&#36890;&#36807;&#39044;&#22522;&#35843;&#36807;&#28388;&#65292;&#28040;&#38500;&#20102;basecalling&#20013;&#30340;&#28010;&#36153;&#35745;&#31639;&#65292;&#25552;&#39640;&#20102;&#22522;&#22240;&#32452;&#20998;&#26512;&#27969;&#31243;&#30340;&#25928;&#29575;&#12290;</title><link>http://arxiv.org/abs/2212.04953</link><description>&lt;p&gt;
&#36890;&#36807;&#39044;&#22522;&#35843;&#36807;&#28388;&#28040;&#38500;basecalling&#20013;&#30340;&#28010;&#36153;&#35745;&#31639;&#30340;TargetCall
&lt;/p&gt;
&lt;p&gt;
TargetCall: Eliminating the Wasted Computation in Basecalling via Pre-Basecalling Filtering. (arXiv:2212.04953v2 [q-bio.GN] UPDATED)
&lt;/p&gt;
&lt;p&gt;
http://arxiv.org/abs/2212.04953
&lt;/p&gt;
&lt;p&gt;
TargetCall&#36890;&#36807;&#39044;&#22522;&#35843;&#36807;&#28388;&#65292;&#28040;&#38500;&#20102;basecalling&#20013;&#30340;&#28010;&#36153;&#35745;&#31639;&#65292;&#25552;&#39640;&#20102;&#22522;&#22240;&#32452;&#20998;&#26512;&#27969;&#31243;&#30340;&#25928;&#29575;&#12290;
&lt;/p&gt;
&lt;p&gt;

&lt;/p&gt;
&lt;p&gt;
Basecalling&#26159;&#32435;&#31859;&#23380;&#27979;&#24207;&#20998;&#26512;&#20013;&#30340;&#37325;&#35201;&#27493;&#39588;&#65292;&#23427;&#23558;&#32435;&#31859;&#23380;&#27979;&#24207;&#20202;&#30340;&#21407;&#22987;&#20449;&#21495;&#36716;&#25442;&#20026;&#26680;&#37240;&#24207;&#21015;&#65292;&#21363;reads&#12290;&#26368;&#20808;&#36827;&#30340;basecallers&#20351;&#29992;&#22797;&#26434;&#30340;&#28145;&#24230;&#23398;&#20064;&#27169;&#22411;&#23454;&#29616;&#39640;&#24230;&#30340;basecalling&#20934;&#30830;&#24615;&#12290;&#36825;&#20351;&#24471;basecalling&#22312;&#35745;&#31639;&#19978;&#25928;&#29575;&#20302;&#19979;&#19988;&#20869;&#23384;&#28040;&#32791;&#22823;&#65292;&#25104;&#20026;&#25972;&#20010;&#22522;&#22240;&#32452;&#20998;&#26512;&#27969;&#31243;&#30340;&#29942;&#39048;&#12290;&#28982;&#32780;&#65292;&#23545;&#20110;&#35768;&#22810;&#24212;&#29992;&#26469;&#35828;&#65292;&#22823;&#22810;&#25968;reads&#19982;&#24863;&#20852;&#36259;&#30340;&#21442;&#32771;&#22522;&#22240;&#32452;&#19981;&#21305;&#37197;&#65288;&#21363;&#30446;&#26631;&#21442;&#32771;&#22522;&#22240;&#32452;&#65289;&#65292;&#22240;&#27492;&#20250;&#22312;&#21518;&#32493;&#30340;&#22522;&#22240;&#32452;&#27969;&#31243;&#27493;&#39588;&#20013;&#34987;&#20002;&#24323;&#65292;&#28010;&#36153;&#20102;basecalling&#30340;&#35745;&#31639;&#12290;&#20026;&#20102;&#35299;&#20915;&#36825;&#20010;&#38382;&#39064;&#65292;&#25105;&#20204;&#25552;&#20986;&#20102;TargetCall&#65292;&#36825;&#26159;&#31532;&#19968;&#20010;&#29992;&#20110;&#28040;&#38500;basecalling&#20013;&#28010;&#36153;&#35745;&#31639;&#30340;&#39044;&#22522;&#35843;&#36807;&#28388;&#22120;&#12290;TargetCall&#30340;&#20851;&#38190;&#24605;&#24819;&#26159;&#22312;basecalling&#20043;&#21069;&#20002;&#24323;&#19981;&#20250;&#19982;&#30446;&#26631;&#21442;&#32771;&#22522;&#22240;&#32452;&#21305;&#37197;&#30340;reads&#65288;&#21363;&#38750;&#30446;&#26631;reads&#65289;&#12290;TargetCall&#30001;&#20004;&#20010;&#20027;&#35201;&#32452;&#20214;&#32452;&#25104;&#65306;&#65288;1&#65289;LightCall&#65292;&#19968;&#20010;&#36731;&#37327;&#32423;&#30340;&#31070;&#32463;&#32593;&#32476;basecaller&#65292;&#20135;&#29983;&#22122;&#22768;reads&#65307;
&lt;/p&gt;
&lt;p&gt;
Basecalling is an essential step in nanopore sequencing analysis where the raw signals of nanopore sequencers are converted into nucleotide sequences, i.e., reads. State-of-the-art basecallers employ complex deep learning models to achieve high basecalling accuracy. This makes basecalling computationally-inefficient and memory-hungry; bottlenecking the entire genome analysis pipeline. However, for many applications, the majority of reads do no match the reference genome of interest (i.e., target reference) and thus are discarded in later steps in the genomics pipeline, wasting the basecalling computation. To overcome this issue, we propose TargetCall, the first pre-basecalling filter to eliminate the wasted computation in basecalling. TargetCall's key idea is to discard reads that will not match the target reference (i.e., off-target reads) prior to basecalling. TargetCall consists of two main components: (1) LightCall, a lightweight neural network basecaller that produces noisy reads;
&lt;/p&gt;</description></item></channel></rss>